[{"path":"https://pbreheny.github.io/ncvreg/articles/web/inference-local.html","id":"local-false-discovery-rates","dir":"Articles > Web","previous_headings":"","what":"Local False Discovery Rates","title":"Inference: Local mfdr","text":"Classical, single-feature, hypothesis testing approaches rely upon tail-area probabilies, probability test statistic, z, exceeds certain value. contrast, local approaches like local mfdr base inference feature’s specific value value z without considering hypothetical possibility extreme results. Local false discovery rates Bayesian idea can implemented large-scale testing situations using empirical Bayes methods obtain estimates :  Pr(H_{0j} | z_j = z) probability j^{th} null hypothesis true, conditional upon exact value observed test statistic z_j. probability defined local false discovery rate j^{th} feature.","code":""},{"path":"https://pbreheny.github.io/ncvreg/articles/web/inference-local.html","id":"estimation","dir":"Articles > Web","previous_headings":"","what":"Estimation","title":"Inference: Local mfdr","text":"Using Bayes’ rule, Pr(H_{0j} | z_j = z)  = \\frac{\\pi_0 f_0(z)}{\\pi_0f_0(z) + (1 - \\pi_0) f_1(z)}, \\pi_0 prior probability true null hypothesis collection tests, f_0 theoretical density test statistics null, f_1 density non-null test statistics. variety estimators possible depending one goes estimating mixture densities. One simple approach, currently used ncvreg, set \\pi_0 = 1 avoid estimating f_1 estimating marginal density f(z) using kernel density approach. Thus: \\widehat{\\text{mfdr}}(z) = \\frac{\\pi_0 f_0(z)}{\\hat{f}(z)}. situations f_0(z) > \\hat{f}(z), local mfdr estimates capped 1.","code":""},{"path":"https://pbreheny.github.io/ncvreg/articles/web/inference-local.html","id":"test-statistics","dir":"Articles > Web","previous_headings":"","what":"Test Statistics","title":"Inference: Local mfdr","text":"predictor, mfdr() constructs test statistic based upon mathematical conditions necessary variable enter model characterized given value \\lambda. linear regression models, statistics form: z_j = \\frac{\\mathbf{x}_j^T(\\mathbf{y} - \\mathbf{X}_{-j}\\mathbf{\\beta}_{-j})}{\\sigma/\\sqrt{n}}  subscript -j indicates removal j^{th} predictor. logistic Cox regression models, statistics form: z_j = \\frac{u_j+ v_j\\beta_j}{\\sqrt{v_j}}  u_j unpenalized score function (ie: first derivative, respect \\beta_j, log-likelihood), v_j j^{th} diagonal element unpenalized Hessian matrix (ie: second derivative log-likelihood) feature independence, statistics follow standard normal distribution null hypothesis predictor independent current model’s residuals. Despite derived independence, mfdr tends accurate mild moderate dependence structures, see Miller Breheny (2018) additional details.","code":""},{"path":"https://pbreheny.github.io/ncvreg/articles/web/inference-local.html","id":"examples","dir":"Articles > Web","previous_headings":"","what":"Examples","title":"Inference: Local mfdr","text":"Local mfdr estimates can obtained via summary() function: argument number = Inf requests mfdr estimates features, regardless whether active specified model. estimates can understood studying theoretical null empirically estimated mixture densities data:  feature lcavol extremely small estimated mfdr statistic z = 8.77, origin estimate apparent examining ratio null mixture densities z = 8.88. contrast, feature lbph estimated mfdr 0.94 statistic z = 1.51, estimated explained null mixture densities similar near z = 1.51.","code":"fit <- ncvreg(Prostate$X, Prostate$y) summary(fit, lambda = 0.07,  number = Inf) # MCP-penalized linear regression with n=97, p=8 # At lambda=0.0700: # ------------------------------------------------- #   Features satisfying criteria       : 8 #   Average mfdr among chosen features : 0.592 #  #          Estimate       z     mfdr Selected # lcavol   0.530785  8.7704  < 1e-04        * # svi      0.684680  3.9737 0.010695        * # lweight  0.622144  3.7369 0.026104        * # lbph     0.038452  1.5077 0.901245        * # age     -0.004084 -1.2704 0.926945        * # pgg45    0.000000  0.8675 0.951263          # gleason  0.000000  0.7467 0.955590          # lcp      0.000000 -0.2711 0.964801"},{"path":"https://pbreheny.github.io/ncvreg/articles/web/models.html","id":"gaussian-linear-regression","dir":"Articles > Web","previous_headings":"","what":"Gaussian (linear regression)","title":"Models","text":"linear regression, loss function simply squared error loss: L(\\boldsymbol{\\beta}\\,\\vert\\,\\mathbf{X},\\mathbf{y}) = \\lVert\\mathbf{y}-\\mathbf{X}\\boldsymbol{\\beta}\\rVert_2^2; loss proportional deviance outcome \\mathbf{y} follows normal distribution constant variance mean given \\mathbf{X}\\boldsymbol{\\beta}. Prostate data packaged ncvreg, response prostate specific antigen (PSA), measured log scale, follows approximate normal distribution; see ?Prostate information data set. Loading data set R, default, ncvreg fits linear regression model minimax concave penalty (MCP): produces path coefficient estimates, can plot  Although least squares loss function convex, MCP penalty . resulting objective function, therefore, may may convex. ncvreg uses local convexity diagnostic, described Breheny Huang (2011), identify regions coefficient path objective function convex; gray shaded region plot. Users aware solutions region may local optima objective function, global ones. Post-selection inference available using summary method: local marginal false discovery rate (mfdr) given selected features. Roughly, corresponds probability given feature marginally independent residuals value \\lambda. case, appear lcavol, svi, lweight clearly associated response, even adjusting variables model, lbph, age, pgg45 may false positives selected simply chance. information summary() various options, see . Typically, one carry cross-validation purposes assessing predictive accuracy model various values \\lambda:  default, cross-validation error (CV) plotted; models ncvreg, cross-validation error defined \\begin{align*} \\textrm{CV}(\\lambda) &= \\frac{1}{n} \\sum_i L\\{y_i, \\eta_{-}(\\lambda)\\}\\\\ \\eta_{-}(\\lambda) &= \\sum_j x_{ij}\\widehat{\\beta}_j(-,\\lambda), \\end{align*} \\widehat{\\boldsymbol{\\beta}}(-,\\lambda) denotes estimated regression coefficients \\lambda fold observation left . loss function determined type model; least squares loss, therefore, \\textrm{CV}(\\lambda) = \\frac{1}{n} \\sum_i\\{y_i-\\eta_{-}(\\lambda)\\}^2. Alternatively, one can plot \\hat{\\sigma}(\\lambda), signal--noise ration (SNR), R^2:  Calling summary cv.ncvreg object provide summary quantities value minimizes \\textrm{CV}: access elements fit, coef predict methods provided. example, coef(fit, lambda=0.02) returns estimated coefficients \\lambda=0.02, coef(cvfit) returns estimated coefficients value \\lambda minimizing CV.","code":"data(Prostate) X <- Prostate$X y <- Prostate$y fit <- ncvreg(X, y) plot(fit) summary(fit, lambda=0.05) # MCP-penalized linear regression with n=97, p=8 # At lambda=0.0500: # ------------------------------------------------- #   Nonzero coefficients         :   6 #   Expected nonzero coefficients:   2.54 #   Average mfdr (6 features)    :   0.424 #  #         Estimate      z     mfdr Selected # lcavol   0.53179  8.880  < 1e-04        * # svi      0.67256  3.945 0.010189        * # lweight  0.60390  3.666 0.027894        * # lbph     0.08875  1.928 0.773014        * # age     -0.01531 -1.788 0.815269        * # pgg45    0.00168  1.160 0.917570        * cvfit <- cv.ncvreg(X, y) plot(cvfit) par(mfrow=c(2,2)) plot(cvfit, type='cve') plot(cvfit, type='scale')  # sigma hat plot(cvfit, type='snr') plot(cvfit, type='rsq') summary(cvfit) # MCP-penalized linear regression with n=97, p=8 # At minimum cross-validation error (lambda=0.0104): # ------------------------------------------------- #   Nonzero coefficients: 8 #   Cross-validation error (deviance): 0.59 #   R-squared: 0.55 #   Signal-to-noise ratio: 1.22 #   Scale estimate (sigma): 0.771"},{"path":"https://pbreheny.github.io/ncvreg/articles/web/models.html","id":"binomial-logistic-regression","dir":"Articles > Web","previous_headings":"","what":"Binomial (logistic regression)","title":"Models","text":"logistic regression, loss function :  L(\\boldsymbol{\\beta}|\\mathbf{X},\\mathbf{y}) = -2\\sum_{:y_i=1}\\log\\hat{\\pi}_i - 2\\sum_{:y_i=0}\\log(1-\\hat{\\pi}_i);  loss deviance binomial distribution probabilities P(Y_i=1)=\\hat{\\pi}_i given :  \\hat{\\pi}_i = \\frac{\\exp(\\eta_i)}{1+\\eta_i},  \\boldsymbol{\\eta}= \\mathbf{X}\\boldsymbol{\\beta} denotes linear predictors. Heart data provides example data can used logistic regression. Loading data set R, One can change loss function specifying family; fit penalized logistic regression model, , can call plot, coef, predict, summary, etc. fit: Cross-validation similar, although () new option, type='pred' cross-validated prediction error (misclassification error) (b) type='scale' longer option:  Note , defined , cross-validation error cross-validated deviance. optmium, penalized logistic regression model can predict 73% coronary heart disease cases correctly (27% misclassification).","code":"data(Heart) X <- Heart$X y <- Heart$y fit <- ncvreg(X, y, family='binomial') summary(fit, lambda=0.02) # MCP-penalized logistic regression with n=462, p=9 # At lambda=0.0200: # ------------------------------------------------- #   Nonzero coefficients         :   7 #   Expected nonzero coefficients:   1.90 #   Average mfdr (7 features)    :   0.271 #  #           Estimate       z      mfdr Selected # age      0.0506911  5.8368   < 1e-04        * # famhist  0.9096673  4.1177 0.0024258        * # tobacco  0.0802204  3.3117 0.0443510        * # typea    0.0370468  3.1833 0.0656364        * # ldl      0.1657752  3.1019 0.0831088        * # obesity -0.0087180 -1.2579 0.8340700        * # sbp      0.0001648  0.9981 0.8707837        * cvfit <- cv.ncvreg(X, y, family='binomial') par(mfrow=c(2,2)) plot(cvfit, type='all')"},{"path":"https://pbreheny.github.io/ncvreg/articles/web/models.html","id":"poisson","dir":"Articles > Web","previous_headings":"","what":"Poisson","title":"Models","text":"Poisson regression, loss function :  L(\\boldsymbol{\\beta}|\\mathbf{X},\\mathbf{y}) = 2\\sum_i \\left\\{y_i\\log y_i - y_i\\log \\mu_i + mu_i - y_i\\right\\};  note terms constant respect \\mu_i can therefore ignored optimization. loss deviance Poisson distribution Y_i \\sim \\text{Pois}(\\hat{\\mu}_i) rate parameter given :  \\hat{\\mu}_i = \\exp(\\eta_i).  fit penalized Poisson regression model ncvreg:","code":"fit <- ncvreg(X, y, family='poisson')"},{"path":"https://pbreheny.github.io/ncvreg/articles/web/models.html","id":"cox-proportional-hazards","dir":"Articles > Web","previous_headings":"","what":"Cox proportional hazards","title":"Models","text":"models fall category distributions known exponential families (hence family) argument. ncvreg also allows users fit Cox proportional hazards models, although models fall outside framework therefore fit using different function, ncvsurv. Cox regression, deviance  L(\\boldsymbol{\\beta}|\\mathbf{X},\\mathbf{y}) = -2\\sum_{j=1}^{m} d_j \\eta_j + 2\\sum_{j=1}^{m} d_j \\log\\left\\{\\sum_{\\R_j} \\exp(\\eta_i)\\right\\},  t_1 < t_2 < \\ldots < t_m denotes increasing list unique failure times indexed j R_j denotes set observations still risk time t_j, known risk set. Lung data (see ?Lung details) provides example time--event data can used Cox regression. Loading data set R, fit penalized Cox regression model, , can call plot, coef, predict, summary, etc. fit: Cross-validation similar:  addition quantities like coefficients number nonzero coefficients predict returns types models, predict() ncvsurv object can also estimate baseline hazard (using Kalbfleish-Prentice method) therefore, survival function. method plot resulting function also available:  multiple subjects involved prediction:","code":"data(Lung) X <- Lung$X y <- Lung$y fit <- ncvsurv(X, y) summary(fit, lambda=0.02) # MCP-penalized Cox regression with n=137, p=8 # At lambda=0.0200: # ------------------------------------------------- #   Nonzero coefficients         :   7 #   Expected nonzero coefficients:   4.59 #   Average mfdr (7 features)    :   0.656 #  #           Estimate       z     mfdr Selected # karno    -0.032745 -6.5040  < 1e-04        * # squamous -0.853399 -3.7843 0.026061        * # large    -0.460405 -2.0522 0.806970        * # trt       0.294489  1.5967 0.905628        * # adeno     0.324743  1.3941 0.928532        * # age      -0.008869 -1.0297 0.952846        * # prior     0.033326  0.3585 0.969878        * cvfit <- cv.ncvsurv(X, y) par(mfrow=c(1,2)) plot(cvfit, type='cve') plot(cvfit, type='rsq') S <- predict(fit, X[1,], type='survival', lambda=0.02) S(365)   # Estiamted survival at 1 year # [1] 0.8594485 plot(S, xlim=c(0,200)) S <- predict(fit, X, type='survival', lambda=0.02) S[[1]](365)  # Estimated survival at 1 year for subject 1 # [1] 0.8594485 S[[2]](365)  # Estimated survival at 1 year for subject 2 # [1] 0.8887079 plot(S, xlim=c(0,200))"},{"path":"https://pbreheny.github.io/ncvreg/articles/web/penalties.html","id":"mcp","dir":"Articles > Web","previous_headings":"","what":"MCP","title":"Penalties","text":"default penalty ncvreg. EQUATION . PICTURE PENALTY. following figure illustrates effect changing \\gamma:  smaller \\gamma values, estimates transition rapidly 0 unpenalized solutions; transition happens slowly gradually larger \\gamma values. Note one consquence rapid transitions low \\gamma values solutions less stable (gray region depicting region solution path locally convex larger).","code":"par(mfrow=c(1,3)) fit <- ncvreg(X, y, gamma=1.5) plot(fit, main=expression(paste(gamma,\"=\",1.5))) fit <- ncvreg(X, y) plot(fit, main=expression(paste(gamma,\"=\",3))) fit <- ncvreg(X, y, gamma=10) plot(fit, main=expression(paste(gamma,\"=\",10)))"},{"path":"https://pbreheny.github.io/ncvreg/articles/web/penalties.html","id":"scad","dir":"Articles > Web","previous_headings":"","what":"SCAD","title":"Penalties","text":"EQUATION . PICTURE PENALTY.","code":""},{"path":"https://pbreheny.github.io/ncvreg/articles/web/penalties.html","id":"lasso","dir":"Articles > Web","previous_headings":"","what":"Lasso","title":"Penalties","text":"EQUATION . PICTURE PENALTY.","code":"par(mfrow=c(1,3)) fit <- ncvreg(X, y) plot(fit, main=\"MCP\") fit <- ncvreg(X, y, penalty=\"SCAD\") plot(fit, main=\"SCAD\") fit <- ncvreg(X, y, penalty=\"lasso\") plot(fit, main=\"Lasso\")"},{"path":"https://pbreheny.github.io/ncvreg/articles/web/penalties.html","id":"elastic-net-and-mnet","dir":"Articles > Web","previous_headings":"","what":"Elastic Net and MNet","title":"Penalties","text":"EQUATION .  MENTION ELASTIC NET","code":"par(mfrow=c(1,3)) fit <- ncvreg(X, y) plot(fit, main=expression(paste(alpha,\"=\",1))) fit <- ncvreg(X, y, alpha=0.5) plot(fit, main=expression(paste(alpha,\"=\",0.5))) fit <- ncvreg(X, y, alpha=0.1) plot(fit, main=expression(paste(alpha,\"=\",0.1)))"},{"path":"https://pbreheny.github.io/ncvreg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Breheny. Author, maintainer. Ryan Miller. Author. Logan Harris. Author.","code":""},{"path":"https://pbreheny.github.io/ncvreg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Breheny P, Huang J (2011). “Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection.” Annals Applied Statistics, 5(1), 232–253. doi:10.1214/10-AOAS388, https://doi.org/10.1214/10-AOAS388.","code":"@Article{,   author = {Patrick Breheny and Jian Huang},   title = {Coordinate descent algorithms for nonconvex penalized regression, \twith applications to biological feature selection},   journal = {Annals of Applied Statistics},   year = {2011},   volume = {5},   pages = {232--253},   number = {1},   doi = {10.1214/10-AOAS388},   url = {https://doi.org/10.1214/10-AOAS388}, }"},{"path":"https://pbreheny.github.io/ncvreg/index.html","id":"regularization-paths-for-mcp-and-scad-penalized-regression-models","dir":"","previous_headings":"","what":"Regularization Paths for SCAD and MCP Penalized Regression Models","title":"Regularization Paths for SCAD and MCP Penalized Regression Models","text":"ncvreg R package fitting regularization paths linear regression, GLM, Cox regression models using lasso nonconvex penalties, particular minimax concave penalty (MCP) smoothly clipped absolute deviation (SCAD) penalty, options additional L2 penalties (“elastic net” idea). Utilities carrying cross-validation well post-fitting visualization, summarization, inference, prediction also provided. get started using ncvreg, see “getting started” vignette learn , follow links “Learn ” ncvreg website details algorithms used ncvreg, see original article: Breheny P Huang J (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232–253 marginal false discovery rate idea used post-selection inference, see Breheny P (2019) Marginal false discovery rates penalized regression models. Biostatistics, 20: 299-314 Miller R Breheny P (2023) Feature-specific inference penalized regression using local false discovery rates. Statistics Medicine, 42: 1412–1429. also teach course high-dimensional data analysis; lecture notes publicly available may helpful, particular lectures MCP/SCAD marginal FDR.","code":""},{"path":"https://pbreheny.github.io/ncvreg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Regularization Paths for SCAD and MCP Penalized Regression Models","text":"install latest release version CRAN: install latest development version GitHub:","code":"install.packages(\"ncvreg\") remotes::install_github(\"pbreheny/ncvreg\")"},{"path":"https://pbreheny.github.io/ncvreg/reference/AUC.html","id":null,"dir":"Reference","previous_headings":"","what":"AUC for cv.ncvsurv objects — AUC.cv.ncvsurv","title":"AUC for cv.ncvsurv objects — AUC.cv.ncvsurv","text":"Calculates cross-validated AUC (concordance) cv.ncvsurv object.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/AUC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AUC for cv.ncvsurv objects — AUC.cv.ncvsurv","text":"","code":"# S3 method for class 'cv.ncvsurv' AUC(obj, ...)"},{"path":"https://pbreheny.github.io/ncvreg/reference/AUC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AUC for cv.ncvsurv objects — AUC.cv.ncvsurv","text":"obj cv.ncvsurv object. must run cv.ncvsurv() option returnY=TRUE order AUC() work. ... S3 method compatibility; used","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/AUC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AUC for cv.ncvsurv objects — AUC.cv.ncvsurv","text":"area curve (AUC), equivalently, concordance statistic (C), calculated according procedure described van Houwelingen Putter (2011). function calls survival::concordancefit(), except cross-validated linear predictors used guard overfitting. Thus, values returned AUC.cv.ncvsurv() lower obtain concordancefit() fit full (unpenalized) model.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/AUC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"AUC for cv.ncvsurv objects — AUC.cv.ncvsurv","text":"van Houwelingen H, Putter H (2011). Dynamic Prediction Clinical Survival Analysis.  CRC Press.","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/AUC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"AUC for cv.ncvsurv objects — AUC.cv.ncvsurv","text":"Patrick Breheny, Brandon Butcher, Lawrence Hunsicker","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/AUC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AUC for cv.ncvsurv objects — AUC.cv.ncvsurv","text":"","code":"data(Lung) X <- Lung$X y <- Lung$y  cvfit <- cv.ncvsurv(X, y, returnY=TRUE) head(AUC(cvfit)) #> [1] 0.5528169 0.6138687 0.6512949 0.6715129 0.6845752 0.6894593 lam <- cvfit$lambda plot(lam, AUC(cvfit), xlim=rev(range(lam)), lwd=3, type='l',      las=1, xlab=expression(lambda), ylab='AUC')"},{"path":"https://pbreheny.github.io/ncvreg/reference/Heart.html","id":null,"dir":"Reference","previous_headings":"","what":"Risk factors associated with heart disease — Heart","title":"Risk factors associated with heart disease — Heart","text":"Data subset Coronary Risk-Factor Study baseline survey, carried rural South Africa.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Heart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Risk factors associated with heart disease — Heart","text":"","code":"Heart"},{"path":"https://pbreheny.github.io/ncvreg/reference/Heart.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Risk factors associated with heart disease — Heart","text":"list two objects: y X y Coronary heart disease baseline; 1=Yes 0=X matrix 462 observations (rows) 9 predictor variables (columns). remainder list describes columns X sbp Systolic blood pressure tobacco Cumulative tobacco consumption, kg ldl Low-density lipoprotein cholesterol adiposity Adipose tissue concentration famhist Family history heart disease (1=Present, 0=Absent) typea Score test designed measure type-behavior obesity Obesity alcohol Current consumption alcohol age Age subject","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Heart.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Risk factors associated with heart disease — Heart","text":"https://web.stanford.edu/~hastie/ElemStatLearn/","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Heart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Risk factors associated with heart disease — Heart","text":"Hastie T, Tibshirani R, Friedman J. (2001). Elements Statistical Learning.  Springer. Rousseauw J, et al. (1983). Coronary risk factor screening three rural communities. South African Medical Journal, 64: 430-436.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Lung.html","id":null,"dir":"Reference","previous_headings":"","what":"VA lung cancer data set — Lung","title":"VA lung cancer data set — Lung","text":"Data randomised trial two treatment regimens lung cancer. standard survival analysis data set classic textbook Kalbfleisch Prentice.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Lung.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VA lung cancer data set — Lung","text":"","code":"Lung"},{"path":"https://pbreheny.github.io/ncvreg/reference/Lung.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"VA lung cancer data set — Lung","text":"list two objects: y X y two column matrix (Surv object) containing follow-time (days) indicator variable whether patient died study . X matrix 137 observations (rows) 9 predictor variables (columns). remainder list describes columns X trt Treatment indicator (1=control group, 2=treatment group) karno Karnofsky performance score (0=bad, 100=good) diagtime Time diagnosis randomization (months) age Age (years, baseline) prior Prior therapy (0=, 1=yes) squamous Indicator whether cancer type squamous cell carcinoma (0=, 1=yes) small Indicator whether cancer type small cell lung cancer (0=, 1=yes) adeno Indicator whether cancer type adenocarcinoma (0=, 1=yes) large Indicator whether cancer type large cell carcinoma (0=, 1=yes)","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Lung.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"VA lung cancer data set — Lung","text":"https://cran.r-project.org/package=survival","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Lung.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"VA lung cancer data set — Lung","text":"Kalbfleisch D Prentice RL (1980), Statistical Analysis Failure Time Data. Wiley, New York.","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/Prostate.html","id":null,"dir":"Reference","previous_headings":"","what":"Factors associated with prostate specific antigen — Prostate","title":"Factors associated with prostate specific antigen — Prostate","text":"Data study Stamey et al. (1989) examine association prostate specific antigen (PSA) several clinical measures potentially associated PSA men receive radical prostatectomy.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Prostate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factors associated with prostate specific antigen — Prostate","text":"","code":"Prostate"},{"path":"https://pbreheny.github.io/ncvreg/reference/Prostate.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Factors associated with prostate specific antigen — Prostate","text":"list two objects: y X y Log PSA X matrix 97 instances (rows) 8 predictor variables (columns). remainder list describes columns X lcavol Log cancer volume lweight Log prostate weight age man's age (years) lbph Log amount benign hyperplasia svi Seminal vesicle invasion (1=Yes, 0=) lcp Log capsular penetration gleason Gleason score pgg45 Percent Gleason scores 4 5","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Prostate.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Factors associated with prostate specific antigen — Prostate","text":"https://web.stanford.edu/~hastie/ElemStatLearn/","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/Prostate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Factors associated with prostate specific antigen — Prostate","text":"Hastie T, Tibshirani R, Friedman J. (2001). Elements Statistical Learning.  Springer. Stamey T, et al. (1989). Prostate specific antigen diagnosis treatment adenocarcinoma prostate. II. Radical prostatectomy treated patients. Journal Urology, 16: 1076-1083.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/assign_fold.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign folds for cross-validation — assign_fold","title":"Assign folds for cross-validation — assign_fold","text":"y two unique values, fold assignments chosen balance outcomes fold. useful logistic regression time--event data (balance fraction observations censored).","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/assign_fold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign folds for cross-validation — assign_fold","text":"","code":"assign_fold(y, folds, seed)"},{"path":"https://pbreheny.github.io/ncvreg/reference/assign_fold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign folds for cross-validation — assign_fold","text":"y Either () vector outcomes (ii) vector 1:n folds Number folds seed (optional) set seed reproducibility","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/assign_fold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign folds for cross-validation — assign_fold","text":"vector integers indicating fold assignments","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/assign_fold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign folds for cross-validation — assign_fold","text":"","code":"assign_fold(rnorm(11), 2) #>  [1] 2 1 1 1 1 2 1 2 2 2 1 assign_fold(1:41, 7) #>  [1] 3 2 3 1 3 3 2 4 2 7 5 6 4 1 6 7 5 5 6 4 5 1 7 2 5 3 4 6 7 2 3 7 1 1 5 1 4 6 #> [39] 2 4 6 assign_fold(1:41, 7) |> table() #>  #> 1 2 3 4 5 6 7  #> 6 6 6 6 6 6 5  data(Heart) assign_fold(Heart$y, 7) |> head() #> [1] 2 5 1 4 2 3 assign_fold(Heart$y, 7) |> table(Heart$y) #>     #>      0  1 #>   1 43 23 #>   2 43 23 #>   3 43 23 #>   4 43 23 #>   5 43 23 #>   6 43 23 #>   7 44 22"},{"path":"https://pbreheny.github.io/ncvreg/reference/boot_ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Hybrid Bootstrap Confidence Intervals — boot_ncvreg","title":"Hybrid Bootstrap Confidence Intervals — boot_ncvreg","text":"Performs hybrid bootstrapping approach construct quantile based confidence intervals around original lasso/MCP/SCAD estimator. Specifically, traditional pairs bootstrap performed 1 adjustment: bootstrap sample given covariate zero, random sample full conditional posterior used bootstrap sample instead. avoids creation intervals endpoints exactly equal zero.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/boot_ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hybrid Bootstrap Confidence Intervals — boot_ncvreg","text":"","code":"boot_ncvreg(   X,   y,   fit,   lambda,   sigma2,   cluster,   seed,   nboot = 1000,   penalty = \"lasso\",   level = 0.95,   gamma = switch(penalty, SCAD = 3.7, 3),   alpha = 1,   returnCV = FALSE,   return_boot = FALSE,   verbose = FALSE,   ... )"},{"path":"https://pbreheny.github.io/ncvreg/reference/boot_ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hybrid Bootstrap Confidence Intervals — boot_ncvreg","text":"X design matrix, without intercept. boot_ncvreg standardizes data includes intercept default. y response vector. fit (optional) object class ncvreg cv.ncvreg. object class ncvreg provides data, penalty choices, lambda sequence boot_ncvreg. object class cv.ncvreg can addition can provide information selecting lambda estimating sigma2. provided, y provided X provided fit contain X. lambda (optional) value lambda provide interval estimates . left missing selected using CV. user wants set lambda sequence used select lambda via cross validation, call cv.ncvreg separately pass resulting object fit. sigma2 (optional) variance use Hybrid sampling. left missing set using estimator suggested Reid et. al. (2016) using CV. cluster Bootstrapping cv.ncvreg (applicable) can run parallel across cluster using parallel package. cluster must set advance using parallel::makeCluster() function package. cluster must passed boot_ncvreg. seed may set seed random number generator order obtain reproducible results. set overall process. user wishes set seed specifically cv.ncvreg call separately pass fitted object argument fit. nboot number bootstrap replications use. penalty penalty applied model.  Either \"lasso\" (default), \"MCP\", \"SCAD\". level confidence level required. gamma tuning parameter MCP/SCAD penalty (see ncvreg details). Default 3 MCP 3.7 SCAD. Ignored fit provided. alpha Tuning parameter Elastc net estimator controls relative contributions lasso/MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent lasso/MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. Ignored fit provided. returnCV TRUE, cv.ncvreg fit returned (applicable). return_boot TRUE, bootstrap draws returned. verbose FALSE, non-essential messages suppressed. ... named arguments passed ncvreg cv.ncvreg.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/boot_ncvreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hybrid Bootstrap Confidence Intervals — boot_ncvreg","text":"list : confidence_intervals data.frame original point estimates along lower upper bounds Hybrid CIs. lambda value lambda confidence_intervals constructed . sigma2 value sigma2 used Hybrid bootstrap sampling. penalty penalty intervals correspond . alpha tuning parameter Enet estimator used. level confidence level intervals correspond . penalty \"lasso\" used, gamma tuning parameter MCP/SCAD penalty. returnCV TRUE cv.ncvreg object fit supplied cv.ncvreg cv.ncvreg fit used estimate lambda sigma2 (applicable). return_boot TRUE boot_draws data.frame Hybrid bootstrap draws returned.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/boot_ncvreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hybrid Bootstrap Confidence Intervals — boot_ncvreg","text":"resulting intervals exact nominal coverage covariates. instead constructed way overall coverage approximately equal nominal long true distribution betas Laplace covariates independent. said, practice, average coverage fairly robust assumptions. Note: Draws full conditional posterior approximations MCP/SCAD alpha 1.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/boot_ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hybrid Bootstrap Confidence Intervals — boot_ncvreg","text":"","code":"data(Prostate) X <- Prostate$X y <- Prostate$y boot_ncvreg(X, y, level = 0.8) #> $confidence_intervals #>            estimates       lower         upper #> lcavol   0.562243689  0.45981106  0.6567666354 #> lweight  0.620231684  0.32127116  0.9009464310 #> age     -0.020914110 -0.03347420 -0.0078682197 #> lbph     0.095850091  0.02135000  0.1803362582 #> svi      0.755631635  0.46751421  1.0634167004 #> lcp     -0.101882411 -0.21771903 -0.0002548175 #> gleason  0.048094456 -0.12319034  0.2360152589 #> pgg45    0.004379408 -0.00109211  0.0105023104 #>  #> $lambda #> [1] 0.0008434274 #>  #> $sigma2 #> [1] 0.4838195 #>  #> $penalty #> [1] \"lasso\" #>  #> $alpha #> [1] 1 #>  #> $level #> [1] 0.8 #>"},{"path":"https://pbreheny.github.io/ncvreg/reference/cv.ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for ncvreg/ncvsurv — cv.ncvreg","title":"Cross-validation for ncvreg/ncvsurv — cv.ncvreg","text":"Performs k-fold cross validation MCP- SCAD-penalized regression models grid values regularization parameter lambda.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/cv.ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for ncvreg/ncvsurv — cv.ncvreg","text":"","code":"cv.ncvreg(   X,   y,   ...,   cluster,   nfolds = 10,   fold,   returnY = FALSE,   trace = FALSE )  cv.ncvsurv(   X,   y,   ...,   cluster,   nfolds = 10,   fold,   se = c(\"quick\", \"bootstrap\"),   returnY = FALSE,   trace = FALSE )"},{"path":"https://pbreheny.github.io/ncvreg/reference/cv.ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for ncvreg/ncvsurv — cv.ncvreg","text":"X design matrix, without intercept, ncvreg() ncvsurv(). y response, ncvreg() ncvsurv(). ... Additional arguments ncvreg() ncvsurv(). cluster cv.ncvreg() cv.ncvsurv() can run parallel across cluster using parallel package. cluster must set advance using parallel::makeCluster() function package. cluster must passed cv.ncvreg() cv.ncvsurv() (see example). nfolds number cross-validation folds.  Default 10. fold fold observation belongs . default observations randomly assigned. returnY cv.ncvreg()/cv.ncvsurv() return linear predictors cross-validation folds?  Default FALSE; TRUE, return matrix element row , column j fitted value observation fold observation excluded fit, jth value lambda. NOTE: cv.ncvsurv(), rows Y ordered time study, therefore correspond original order observations pased cv.ncvsurv(). trace set TRUE, inform user progress announcing beginning CV fold. Default FALSE. se cv.ncvsurv(), method cross-valiation standard error (CVSE) calculated. 'quick' approach based rough approximation, can calculated less instantly.  'bootstrap' approach accurate, requires additional computing time.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/cv.ncvreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for ncvreg/ncvsurv — cv.ncvreg","text":"object S3 class cv.ncvreg cv.ncvsurv containing: cve error value lambda, averaged across cross- validation folds. cvse estimated standard error associated value cve. fold fold assignments cross-validation observation; note cv.ncvsurv(), terms ordered observations, original observations. lambda sequence regularization parameter values along cross-validation error calculated. fit fitted ncvreg() ncvsurv() object whole data. min index lambda corresponding lambda.min. lambda.min value lambda minimum cross-validation error. null.dev deviance intercept-model. supplied lambda sequence, quantity may meaningful. Bias estimated bias minimum cross-validation error, Tibshirani Tibshirani (2009) doi:10.1214/08-AOAS224 pe family=\"binomial\", cross-validation prediction error value lambda. Y returnY=TRUE, matrix cross-validated fitted values (see ).","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/cv.ncvreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-validation for ncvreg/ncvsurv — cv.ncvreg","text":"function calls ncvreg/ncvsurv nfolds times, time leaving 1/nfolds data.  cross-validation error based deviance; see details. family=\"binomial\" models, cross-validation fold assignments balanced across 0/1 outcomes, fold proportion 0/1 outcomes (close proportion possible achieve cases divide evenly). Cox models, cv.ncvsurv() uses approach calculating full Cox partial likelihood using cross-validated set linear predictors. approaches cross-validation Cox regression model proposed literature; strengths weaknesses various methods penalized regression Cox model subject current research.  simple approximation standard error provided, although option bootstrap standard error (se='bootstrap') also available.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/cv.ncvreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cross-validation for ncvreg/ncvsurv — cv.ncvreg","text":"Breheny P Huang J. (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232-253. doi:10.1214/10-AOAS388","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/cv.ncvreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cross-validation for ncvreg/ncvsurv — cv.ncvreg","text":"Patrick Breheny; Grant Brown helped parallelization support","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/cv.ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-validation for ncvreg/ncvsurv — cv.ncvreg","text":"","code":"data(Prostate)  cvfit <- cv.ncvreg(Prostate$X, Prostate$y) plot(cvfit)  summary(cvfit) #> MCP-penalized linear regression with n=97, p=8 #> At minimum cross-validation error (lambda=0.0068): #> ------------------------------------------------- #>   Nonzero coefficients: 8 #>   Cross-validation error (deviance): 0.56 #>   R-squared: 0.58 #>   Signal-to-noise ratio: 1.37 #>   Scale estimate (sigma): 0.746  fit <- cvfit$fit plot(fit)  beta <- fit$beta[,cvfit$min]  ## requires loading the parallel package if (FALSE) { # \\dontrun{ library(parallel) X <- Prostate$X y <- Prostate$y cl <- makeCluster(4) cvfit <- cv.ncvreg(X, y, cluster=cl, nfolds=length(y))} # }  # Survival data(Lung) X <- Lung$X y <- Lung$y  cvfit <- cv.ncvsurv(X, y) summary(cvfit) #> MCP-penalized Cox regression with n=137, p=8 #> At minimum cross-validation error (lambda=0.1687): #> ------------------------------------------------- #>   Nonzero coefficients: 3 #>   Cross-validation error (deviance): 7.55 #>   R-squared: 0.28 #>   Signal-to-noise ratio: 0.39 plot(cvfit)  plot(cvfit, type=\"rsq\")"},{"path":"https://pbreheny.github.io/ncvreg/reference/local_mfdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate local mFDR for all features — local_mfdr","title":"Estimate local mFDR for all features — local_mfdr","text":"local_mfdr() called summary.ncvreg(), typically offers convenient interface users. , however, working local mfdrs programmatically rather interactively, probably want use local_mfdr(), skips sorting, filtering, print formatting summary.ncvreg().","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/local_mfdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate local mFDR for all features — local_mfdr","text":"","code":"local_mfdr(   fit,   lambda,   X = NULL,   y = NULL,   method = c(\"ashr\", \"kernel\"),   sigma,   ... )"},{"path":"https://pbreheny.github.io/ncvreg/reference/local_mfdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate local mFDR for all features — local_mfdr","text":"fit fitted ncvreg ncvsurv object. lambda value lambda inference carried . X, y design matrix response used fit model; cases, necessary provide X y returned ncvreg, see returnX argument ncvreg(). method method used calculate local fdr?  Options ashr (tends accurate) kernel (requires additional packages).  default use ashr package installed. sigma linear regression models, users can supply estimate residual standard deviation. default use RSS / DF, degrees freedom approximated using number nonzero coefficients. ... Additional arguments ashr::ash() using method='ashr'.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/local_mfdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate local mFDR for all features — local_mfdr","text":"features penalized, object returns data frame one row per feature four columns: Estimate: coefficient estimate penalized regression fit z: test statistic approximately follows standard normal distribution null hypothesis feature marginally independent outcome mfdr: estimated marginal local false discovery rate Selected: Features nonzero coefficient estimates given asterisk features penalized others , list returned two elements: pen.vars, consists data frame described , unpen.vars, data frame four columns: Estimate, SE, Statistic, p.value.  standard errors p-values based classical lm/glm/coxph model using effect penalized features offset.","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/local_mfdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate local mFDR for all features — local_mfdr","text":"","code":"# Linear regression data(Prostate) fit <- ncvreg(Prostate$X, Prostate$y) local_mfdr(fit, 0.1) #>          Estimate          z         mfdr Selected #> lcavol  0.5387509  8.8807209 4.956187e-16        * #> lweight 0.6382717  3.9554154 1.172927e-02        * #> age     0.0000000 -1.0067558 9.454421e-01          #> lbph    0.0000000  1.2720071 9.275879e-01          #> svi     0.6102800  3.7616622 2.430660e-02        * #> lcp     0.0000000 -0.1448424 9.660606e-01          #> gleason 0.0000000  0.7670990 9.554227e-01          #> pgg45   0.0000000  0.9391426 9.487372e-01           fit <- ncvreg(Prostate$X, Prostate$y, penalty.factor=rep(0:1, each=4)) local_mfdr(fit, 0.1) #> $pen.vars #>          Estimate          z       mfdr Selected #> svi     0.6965651  4.1620116 0.00927594        * #> lcp     0.0000000 -0.3000954 0.97982329          #> gleason 0.0000000  0.8748507 0.97194659          #> pgg45   0.0000000  1.0057234 0.96838914          #>  #> $unpen.vars #>            Estimate  std.error statistic      p.value #> lcavol   0.54734893 0.06407513  8.542219 2.654740e-13 #> lweight  0.58932799 0.19646341  2.999457 3.479201e-03 #> age     -0.01641325 0.01061286 -1.546875 1.253265e-01 #> lbph     0.10049326 0.05671452  1.772200 7.967190e-02 #>   # Logistic regression data(Heart) X <- Heart$X y <- Heart$y fit <- ncvreg(X, y, family='binomial') local_mfdr(fit, 0.1) #>             Estimate         z         mfdr Selected #> sbp       0.00000000 2.1766234 4.935585e-01          #> tobacco   0.00000000 4.1575377 1.883630e-03          #> ldl       0.00000000 4.2061346 1.542018e-03          #> adiposity 0.00000000 2.5179307 3.043436e-01          #> famhist   0.05505671 4.7878991 1.190670e-04        * #> typea     0.00000000 2.8422109 1.550916e-01          #> obesity   0.00000000 0.7961026 8.835105e-01          #> alcohol   0.00000000 0.9210390 8.720085e-01          #> age       0.03577763 8.1799158 1.199132e-13        *  # Cox regression data(Lung) X <- Lung$X y <- Lung$y fit <- ncvsurv(X, y) local_mfdr(fit, 0.1) #>             Estimate          z         mfdr Selected #> trt       0.03737689  1.3316047 9.462748e-01        * #> karno    -0.03196343 -6.3518252 1.081598e-07        * #> diagtime  0.00000000  0.2972526 9.761319e-01          #> age       0.00000000 -0.5655773 9.732810e-01          #> prior     0.00000000  0.2907796 9.761762e-01          #> squamous -0.64313783 -3.1199729 2.476091e-01        * #> small     0.00000000  0.2041520 9.766697e-01          #> adeno     0.28016650  2.0507762 8.392153e-01        * #> large    -0.20731421 -1.7987677 8.944907e-01        *"},{"path":"https://pbreheny.github.io/ncvreg/reference/logLik.ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Log-Likelihood — logLik.ncvreg","title":"Extract Log-Likelihood — logLik.ncvreg","text":"Extract log-likelihood ncvreg ncvsurv object.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/logLik.ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Log-Likelihood — logLik.ncvreg","text":"","code":"# S3 method for class 'ncvreg' logLik(object, REML = FALSE, ...)  # S3 method for class 'ncvsurv' logLik(object, ...)"},{"path":"https://pbreheny.github.io/ncvreg/reference/logLik.ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Log-Likelihood — logLik.ncvreg","text":"object ncvreg ncvsurv object, obtained ncvreg() ncvsurv() REML logLik.lm() ... S3 compatibility","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/mfdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal false discovery rates — mfdr","title":"Marginal false discovery rates — mfdr","text":"Estimates marginal false discovery rate (mFDR) penalized regression model.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/mfdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal false discovery rates — mfdr","text":"","code":"mfdr(fit, X)"},{"path":"https://pbreheny.github.io/ncvreg/reference/mfdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal false discovery rates — mfdr","text":"fit ncvreg ncvsurv object. X model matrix corresponding fit. necessary linear regression, logistic Cox regression, mFDR depends X. necessary supply X already contained fit; .e., ncvreg/ncvsurv run returnX=TRUE.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/mfdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marginal false discovery rates — mfdr","text":"object S3 class mfdr inheriting data.frame, containing: EF number variables selected value lambda, averaged permutation fits. S actual number selected variables non-permuted data. mFDR estimated marginal false discovery rate (EF/S).","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/mfdr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Marginal false discovery rates — mfdr","text":"function estimates marginal false discovery rate (mFDR) penalized regression model.  estimate tends accurate settings, slightly conservative predictors highly correlated.  alternative way estimating mFDR, typically accurate highly correlated cases, see perm.ncvreg().","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/mfdr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Marginal false discovery rates — mfdr","text":"Patrick Breheny Ryan Miller","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/mfdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal false discovery rates — mfdr","text":"","code":"# Linear regression -------------------------------- data(Prostate) fit <- ncvreg(Prostate$X, Prostate$y)  obj <- mfdr(fit) obj[1:10,] #>                   EF S         mFDR #> 0.84343 0.000000e+00 0 0.000000e+00 #> 0.78658 1.418692e-11 1 1.418692e-11 #> 0.73357 3.642789e-11 1 3.642789e-11 #> 0.68413 1.098086e-10 1 1.098086e-10 #> 0.63802 3.833845e-10 1 3.833845e-10 #> 0.59502 1.516932e-09 1 1.516932e-09 #> 0.55492 6.608721e-09 1 6.608721e-09 #> 0.51752 3.065378e-08 1 3.065378e-08 #> 0.48264 1.460789e-07 1 1.460789e-07 #> 0.45011 6.907848e-07 1 6.907848e-07  # Comparison with perm.ncvreg op <- par(mfrow=c(2,2)) plot(obj) plot(obj, type=\"EF\") pmfit <- perm.ncvreg(Prostate$X, Prostate$y) plot(pmfit) plot(pmfit, type=\"EF\")  par(op)  # Logistic regression ------------------------------ data(Heart) fit <- ncvreg(Heart$X, Heart$y, family=\"binomial\") obj <- mfdr(fit) head(obj) #>                   EF S         mFDR #> 0.17746 0.000000e+00 0 0.000000e+00 #> 0.16550 6.893422e-13 1 6.893422e-13 #> 0.15435 2.683651e-11 1 2.683651e-11 #> 0.14394 6.329530e-10 1 6.329530e-10 #> 0.13424 9.776334e-09 1 9.776334e-09 #> 0.12519 1.054851e-07 1 1.054851e-07 op <- par(mfrow=c(1,2)) plot(obj) plot(obj, type=\"EF\")  par(op)  # Cox regression ----------------------------------- data(Lung) fit <- ncvsurv(Lung$X, Lung$y) obj <- mfdr(fit) head(obj) #>                   EF S         mFDR #> 0.44806 0.000000e+00 0 0.000000e+00 #> 0.41786 9.926598e-06 1 9.926598e-06 #> 0.38970 3.996605e-05 1 3.996605e-05 #> 0.36344 1.392150e-04 1 1.392150e-04 #> 0.33894 4.272559e-04 1 4.272559e-04 #> 0.31610 1.173937e-03 1 1.173937e-03 op <- par(mfrow=c(1,2)) plot(obj) plot(obj, type=\"EF\")  par(op)"},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Direct interface for nonconvex penalized regression (non-pathwise) — ncvfit","title":"Direct interface for nonconvex penalized regression (non-pathwise) — ncvfit","text":"function intended users know exactly want complete control fitting process: standardization applied, intercept included, path fit. things best practices data analysis, choosing , – guarantee results meaningful. things particular pay attention : model intercept, (un)penalize properly, typically settings corresponding element penalty.factor zero. provide initial values coefficients; nonconvex optimization, initial values important determining local solution algorithm converges .","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direct interface for nonconvex penalized regression (non-pathwise) — ncvfit","text":"","code":"ncvfit(   X,   y,   init = rep(0, ncol(X)),   r,   xtx,   penalty = c(\"MCP\", \"SCAD\", \"lasso\"),   gamma = switch(penalty, SCAD = 3.7, 3),   alpha = 1,   lambda,   eps = 1e-05,   max.iter = 1000,   penalty.factor = rep(1, ncol(X)),   warn = TRUE )"},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direct interface for nonconvex penalized regression (non-pathwise) — ncvfit","text":"X Design matrix; intercept added, standardization occur (n x p matrix) y Response vector (length n vector) init Initial values beta.  Default: zero (length p vector) r Residuals corresponding init; calculated supplied, already calculated elsewhere, efficient pass argument. WARNING: supply incorrect value r, solution incorrect. (length n vector) xtx X scales: jth element equal crossprod(X[,j])/n. calculated supplied, already calculated elsewhere, efficient pass argument.  particular, X standardized, one pass xtx = rep(1, p).  WARNING: supply incorrect value xtx, solution incorrect. (length p vector) penalty Penalty function applied, either \"MCP\" (default), \"SCAD\", \"lasso\") gamma Tuning parameter MCP/SCAD penalty, ncvreg(); default 3 MCP 3.7 SCAD. alpha Tuning paramter controlling ridge component penalty, ncvreg(); default 1 (meaning ridge penalty) lambda Regularization parameter value estimate beta; must scalar – pathwise optimization, see ncvreg() eps Convergence threshhold. algorithm iterates RMSD change linear predictors coefficient less eps. Default 1e-4. max.iter Maximum number allowed iterations; number reached, algorithm terminate prior convergence.  Default: 1000. penalty.factor Multiplicative factor penalty applied coefficient, ncvreg().  particular, note include intercept, probably want set entry zero . warn Return warning messages failures converge model saturation? Default TRUE.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direct interface for nonconvex penalized regression (non-pathwise) — ncvfit","text":"list containing: beta: estimated regression coefficients iter: number iterations required solve `beta loss: loss (residual sum squares) convergence resid: residuals convergence lambda: See penalty: See gamma: See alpha: See penalty.factor: See n: Sample size","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Direct interface for nonconvex penalized regression (non-pathwise) — ncvfit","text":"moment, function works least-squares loss functions.  Additional functionality loss functions (logistic, Cox) development.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direct interface for nonconvex penalized regression (non-pathwise) — ncvfit","text":"","code":"data(Prostate) X <- cbind(1, Prostate$X) y <- Prostate$y fit <- ncvfit(X, y, lambda=0.1, penalty.factor=c(0, rep(1, ncol(X)-1))) fit$beta #>                    lcavol      lweight          age         lbph          svi  #>  2.268444208  0.677388754  0.000000000 -0.013317940  0.143711214  0.000000000  #>          lcp      gleason        pgg45  #>  0.000000000  0.000000000  0.005398707  # Compare with: coef(ncvreg(X, y), 0.1) #> (Intercept)                  lcavol     lweight         age        lbph  #>  -0.6973059   0.0000000   0.5387509   0.6382717   0.0000000   0.0000000  #>         svi         lcp     gleason       pgg45  #>   0.6102800   0.0000000   0.0000000   0.0000000  # The unstandardized version makes little sense here, as it fails to account # for differences in the scales of the predictors."},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ncvreg: Regularization Paths for SCAD and MCP Penalized Regression Models — ncvreg-package","title":"ncvreg: Regularization Paths for SCAD and MCP Penalized Regression Models — ncvreg-package","text":"Fits regularization paths linear regression, GLM, Cox regression models using lasso nonconvex penalties, particular minimax concave penalty (MCP) smoothly clipped absolute deviation (SCAD) penalty, options additional L2 penalties (\"elastic net\" idea). Utilities carrying cross-validation well post-fitting visualization, summarization, inference, prediction also provided. information, see Breheny Huang (2011) doi:10.1214/10-AOAS388  visit ncvreg homepage https://pbreheny.github.io/ncvreg/.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ncvreg: Regularization Paths for SCAD and MCP Penalized Regression Models — ncvreg-package","text":"Breheny P Huang J. (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232-253.","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ncvreg: Regularization Paths for SCAD and MCP Penalized Regression Models — ncvreg-package","text":"Maintainer: Patrick Breheny patrick-breheny@uiowa.edu (ORCID) Authors: Ryan Miller (ORCID) Logan Harris","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ncvreg: Regularization Paths for SCAD and MCP Penalized Regression Models — ncvreg-package","text":"","code":"vignette(\"getting-started\", package=\"ncvreg\") #> Warning: vignette ‘getting-started’ not found"},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an MCP- or SCAD-penalized regression path — ncvreg","title":"Fit an MCP- or SCAD-penalized regression path — ncvreg","text":"Fit coefficients paths MCP- SCAD-penalized regression models grid values regularization parameter lambda.  Fits linear logistic regression models, option additional L2 penalty.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an MCP- or SCAD-penalized regression path — ncvreg","text":"","code":"ncvreg(   X,   y,   family = c(\"gaussian\", \"binomial\", \"poisson\"),   penalty = c(\"MCP\", \"SCAD\", \"lasso\"),   gamma = switch(penalty, SCAD = 3.7, 3),   alpha = 1,   lambda.min = ifelse(n > p, 0.001, 0.05),   nlambda = 100,   lambda,   eps = 1e-04,   max.iter = 10000,   convex = TRUE,   dfmax = p + 1,   penalty.factor = rep(1, ncol(X)),   warn = TRUE,   returnX,   ... )"},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an MCP- or SCAD-penalized regression path — ncvreg","text":"X design matrix, without intercept.  ncvreg standardizes data includes intercept default. y response vector. family Either \"gaussian\", \"binomial\", \"poisson\", depending response. penalty penalty applied model.  Either \"MCP\" (default), \"SCAD\", \"lasso\". gamma tuning parameter MCP/SCAD penalty (see details). Default 3 MCP 3.7 SCAD. alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. lambda.min smallest value lambda, fraction lambda.max. Default 0.001 number observations larger number covariates .05 otherwise. nlambda number lambda values. Default 100. lambda user-specified sequence lambda values.  default, sequence values length nlambda computed, equally spaced log scale. eps Convergence threshhold.  algorithm iterates RMSD change linear predictors coefficient less eps. Default 1e-4. max.iter Maximum number iterations (total across entire path). Default 10000. convex Calculate index objective function ceases locally convex? Default TRUE. dfmax Upper bound number nonzero coefficients.  Default upper bound. However, large data sets, computational burden may heavy models large number nonzero coefficients. penalty.factor multiplicative factor penalty applied coefficient. supplied, penalty.factor must numeric vector length equal number columns X.  purpose penalty.factor apply differential penalization coefficients thought likely others model. particular, penalty.factor can 0, case coefficient always model without shrinkage. warn Return warning messages failures converge model saturation?  Default TRUE. returnX Return standardized design matrix along fit? default, option turned X 100 MB, turned larger matrices preserve memory. Note certain methods, summary.ncvreg() require access design matrix may able run returnX=FALSE. ... used.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an MCP- or SCAD-penalized regression path — ncvreg","text":"object S3 class \"ncvreg\" containing: beta fitted matrix coefficients. number rows equal number coefficients, number columns equal nlambda. iter vector length nlambda containing number iterations convergence value lambda. lambda sequence regularization parameter values path. penalty, family, gamma, alpha, penalty.factor . convex.min last index objective function locally convex. smallest value lambda objective function convex therefore lambda[convex.min], corresponding coefficients beta[,convex.min]. loss vector containing deviance (.e., loss) value lambda. Note gaussian models, loss simply residual sum squares. n Sample size. Additionally, returnX=TRUE, object also contain X standardized design matrix. y response, centered family='gaussian'.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an MCP- or SCAD-penalized regression path — ncvreg","text":"sequence models indexed regularization parameter lambda fit using coordinate descent algorithm.  logistic regression models, care taken avoid model saturation; algorithm may exit early setting.  objective function defined $$Q(\\beta|X, y) = \\frac{1}{n} L(\\beta|X, y) + P_\\lambda(\\beta),$$ loss function L deviance (-2 times log likelihood) specified outcome distribution (gaussian/binomial/poisson). See details. algorithm stable, efficient, generally converges quite rapidly solution.  GLMs, adaptive rescaling used.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit an MCP- or SCAD-penalized regression path — ncvreg","text":"Breheny P Huang J. (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232-253. doi:10.1214/10-AOAS388","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an MCP- or SCAD-penalized regression path — ncvreg","text":"","code":"# Linear regression -------------------------------------------------- data(Prostate) X <- Prostate$X y <- Prostate$y  op <- par(mfrow=c(2,2)) fit <- ncvreg(X, y) plot(fit, main=expression(paste(gamma,\"=\",3))) fit <- ncvreg(X, y, gamma=10) plot(fit, main=expression(paste(gamma,\"=\",10))) fit <- ncvreg(X, y, gamma=1.5) plot(fit, main=expression(paste(gamma,\"=\",1.5))) fit <- ncvreg(X, y, penalty=\"SCAD\") plot(fit, main=expression(paste(\"SCAD, \",gamma,\"=\",3)))  par(op)  op <- par(mfrow=c(2,2)) fit <- ncvreg(X, y) plot(fit, main=expression(paste(alpha,\"=\",1))) fit <- ncvreg(X, y, alpha=0.9) plot(fit, main=expression(paste(alpha,\"=\",0.9))) fit <- ncvreg(X, y, alpha=0.5) plot(fit, main=expression(paste(alpha,\"=\",0.5))) fit <- ncvreg(X, y, alpha=0.1) plot(fit, main=expression(paste(alpha,\"=\",0.1)))  par(op)  op <- par(mfrow=c(2,2)) fit <- ncvreg(X, y) plot(mfdr(fit))             # Independence approximation plot(mfdr(fit), type=\"EF\")  # Independence approximation perm.fit <- perm.ncvreg(X, y) plot(perm.fit) plot(perm.fit, type=\"EF\")  par(op)  # Logistic regression ------------------------------------------------ data(Heart) X <- Heart$X y <- Heart$y  op <- par(mfrow=c(2,2)) fit <- ncvreg(X, y, family=\"binomial\") plot(fit, main=expression(paste(gamma,\"=\",3))) fit <- ncvreg(X, y, family=\"binomial\", gamma=10) plot(fit, main=expression(paste(gamma,\"=\",10))) fit <- ncvreg(X, y, family=\"binomial\", gamma=1.5) plot(fit, main=expression(paste(gamma,\"=\",1.5))) fit <- ncvreg(X, y, family=\"binomial\", penalty=\"SCAD\") plot(fit, main=expression(paste(\"SCAD, \",gamma,\"=\",3)))  par(op)  op <- par(mfrow=c(2,2)) fit <- ncvreg(X, y, family=\"binomial\") plot(fit, main=expression(paste(alpha,\"=\",1))) fit <- ncvreg(X, y, family=\"binomial\", alpha=0.9) plot(fit, main=expression(paste(alpha,\"=\",0.9))) fit <- ncvreg(X, y, family=\"binomial\", alpha=0.5) plot(fit, main=expression(paste(alpha,\"=\",0.5))) fit <- ncvreg(X, y, family=\"binomial\", alpha=0.1) plot(fit, main=expression(paste(alpha,\"=\",0.1)))  par(op)"},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvsurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an MCP- or SCAD-penalized survival model — ncvsurv","title":"Fit an MCP- or SCAD-penalized survival model — ncvsurv","text":"Fit coefficients paths MCP- SCAD-penalized Cox regression models grid values regularization parameter lambda, option additional L2 penalty.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvsurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an MCP- or SCAD-penalized survival model — ncvsurv","text":"","code":"ncvsurv(   X,   y,   penalty = c(\"MCP\", \"SCAD\", \"lasso\"),   gamma = switch(penalty, SCAD = 3.7, 3),   alpha = 1,   lambda.min = ifelse(n > p, 0.001, 0.05),   nlambda = 100,   lambda,   eps = 1e-04,   max.iter = 10000,   convex = TRUE,   dfmax = p,   penalty.factor = rep(1, ncol(X)),   warn = TRUE,   returnX,   ... )"},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvsurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an MCP- or SCAD-penalized survival model — ncvsurv","text":"X design matrix predictor values.  ncvsurv standardizes data prior fitting. y time--event outcome, two-column matrix survival::Surv() object.  first column time study (follow time); second column binary variable 1 indicating event occurred 0 indicating (right) censoring. penalty penalty applied model.  Either \"MCP\" (default), \"SCAD\", \"lasso\". gamma tuning parameter MCP/SCAD penalty (see details). Default 3 MCP 3.7 SCAD. alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression.  However, alpha=0 supported; alpha may arbitrarily small, exactly 0. lambda.min smallest value lambda, fraction lambda.max. Default .001 number observations larger number covariates .05 otherwise. nlambda number lambda values.  Default 100. lambda user-specified sequence lambda values.  default, sequence values length nlambda computed, equally spaced log scale. eps Convergence threshhold.  algorithm iterates RMSD change linear predictors coefficient less eps. Default 1e-4. max.iter Maximum number iterations (total across entire path). Default 1000. convex Calculate index objective function ceases locally convex?  Default TRUE. dfmax Upper bound number nonzero coefficients.  Default upper bound.  However, large data sets, computational burden may heavy models large number nonzero coefficients. penalty.factor multiplicative factor penalty applied coefficient.  supplied, penalty.factor must numeric vector length equal number columns X.  purpose penalty.factor apply differential penalization coefficients thought likely others model. particular, penalty.factor can 0, case coefficient always model without penalization/shrinkage. warn Return warning messages failures converge model saturation?  Default TRUE. returnX Return standardized design matrix along fit?  default, option turned X 100 MB, turned larger matrices preserve memory.  Note certain methods, summary.ncvreg(), require access design matrix may able run returnX=FALSE. ... used.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvsurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an MCP- or SCAD-penalized survival model — ncvsurv","text":"object S3 class ncvsurv containing: beta fitted matrix coefficients.  number rows equal number coefficients, number columns equal nlambda. iter vector length nlambda containing number iterations convergence value lambda. lambda sequence regularization parameter values path. penalty, gamma, penalty.factor, alpha, model . convex.min last index objective function locally convex. smallest value lambda objective function convex therefore lambda[convex.min], corresponding coefficients beta[,convex.min]. loss deviance fitted model value lambda. n number instances. Cox models, following objects also returned (necessary estimate baseline survival conditonal estimated regression coefficients), ordered time study.  .e., ith row W correspond ith row X): W Matrix exp(beta) values subject lambda values. time Times study. fail Failure event indicator. Additionally, returnX=TRUE, object also contain X standardized design matrix.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvsurv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an MCP- or SCAD-penalized survival model — ncvsurv","text":"sequence models indexed regularization parameter lambda fit using coordinate descent algorithm.  order accomplish , second derivative (Hessian) Cox partial log-likelihood diagonalized (see references details).  objective function defined $$Q(\\beta|X, y) = \\frac{1}{n} L(\\beta|X, y) + P_\\lambda(\\beta),$$ loss function L deviance (-2 times partial log-likelihood) Cox regression mode. See details. Presently, ties handled ncvsurv particularly sophisticated manner. improved upon future release ncvreg.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvsurv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit an MCP- or SCAD-penalized survival model — ncvsurv","text":"Breheny P Huang J. (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232-253. doi:10.1214/10-AOAS388 Simon N, Friedman JH, Hastie T, Tibshirani R. (2011) Regularization Paths Cox's Proportional Hazards Model via Coordinate Descent. Journal Statistical Software, 39: 1-13. doi:10.18637/jss.v039.i05","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/ncvsurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an MCP- or SCAD-penalized survival model — ncvsurv","text":"","code":"data(Lung) X <- Lung$X y <- Lung$y  op <- par(mfrow=c(2,2)) fit <- ncvsurv(X, y) plot(fit, main=expression(paste(gamma,\"=\",3))) fit <- ncvsurv(X, y, gamma=10) plot(fit, main=expression(paste(gamma,\"=\",10))) fit <- ncvsurv(X, y, gamma=1.5) plot(fit, main=expression(paste(gamma,\"=\",1.5))) fit <- ncvsurv(X, y, penalty=\"SCAD\") plot(fit, main=expression(paste(\"SCAD, \",gamma,\"=\",3)))  par(op)  fit <- ncvsurv(X,y) ll <- log(fit$lambda) op <- par(mfrow=c(2,1)) plot(ll, BIC(fit), type=\"l\", xlim=rev(range(ll))) lam <- fit$lambda[which.min(BIC(fit))] b <- coef(fit, lambda=lam) b[b!=0] #>       karno    squamous       adeno  #> -0.03316393 -0.42452397  0.41834812  plot(fit) abline(v=lam)  par(op)  S <- predict(fit, X, type='survival', lambda=lam) plot(S, xlim=c(0,200))"},{"path":"https://pbreheny.github.io/ncvreg/reference/perm.ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation fitting for ncvreg — perm.ncvreg","title":"Permutation fitting for ncvreg — perm.ncvreg","text":"Fits multiple penalized regression models outcome randomly permuted, thereby allowing estimation marginal false discovery rate.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/perm.ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation fitting for ncvreg — perm.ncvreg","text":"","code":"perm.ncvreg(   X,   y,   ...,   permute = c(\"outcome\", \"residuals\"),   N = 10,   seed,   trace = FALSE )"},{"path":"https://pbreheny.github.io/ncvreg/reference/perm.ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation fitting for ncvreg — perm.ncvreg","text":"X design matrix, without intercept, ncvreg. y response vector, ncvreg. ... Additional arguments ncvreg. permute permute.  'outcome', response vector, y, permuted.  'residuals', residuals permuted. available linear regression (.e., family='gaussian'). Note permuting residuals may take long time, residuals differ value lambda, separate permutations required every value lambda. See also permres(). N number permutation replications.  Default 10. seed may set seed random number generator order obtain reproducible results. trace set TRUE, perm.ncvreg inform user progress announcing beginning permutation fit. Default FALSE.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/perm.ncvreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation fitting for ncvreg — perm.ncvreg","text":"object S3 class \"perm.ncvreg\" containing: EF number variables selected value lambda, averaged permutation fits. S actual number selected variables non-permuted data. mFDR estimated marginal false discovery rate (EF/S). fit fitted ncvreg object original (non-permuted) data. loss loss/deviance value lambda, averaged permutation fits.  estimate explanatory power model null conditions, can used adjust loss fitted model manner akin idea adjusted R-squared classical regression.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/perm.ncvreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permutation fitting for ncvreg — perm.ncvreg","text":"function fits penalized regression model actual data, repeats process N times permuted version response vector.  allows estimation expected number variables included chance value lambda.  ratio expected quantity number selected variables using actual (non-permuted) response called marginal false discovery rate (mFDR).","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/perm.ncvreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permutation fitting for ncvreg — perm.ncvreg","text":"Patrick Breheny patrick-breheny@uiowa.edu","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/perm.ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation fitting for ncvreg — perm.ncvreg","text":"","code":"# Linear regression -------------------------------------------------- data(Prostate) pmfit <- perm.ncvreg(Prostate$X, Prostate$y)  op <- par(mfcol=c(2,2)) plot(pmfit) plot(pmfit, type=\"EF\") plot(pmfit$fit) lam <- pmfit$fit$lambda  pmfit.r <- perm.ncvreg(Prostate$X, Prostate$y, permute='residuals') plot(pmfit.r, col=\"red\")              # Permuting residuals is lines(lam, pmfit$mFDR, col=\"gray60\")  # less conservative  par(op)  # Logistic regression ------------------------------------------------ data(Heart) pmfit <- perm.ncvreg(Heart$X, Heart$y, family=\"binomial\")  op <- par(mfcol=c(2,2)) plot(pmfit) plot(pmfit, type=\"EF\") plot(pmfit$fit) par(op)"},{"path":"https://pbreheny.github.io/ncvreg/reference/permres.html","id":null,"dir":"Reference","previous_headings":"","what":"Permute residuals for a fitted ncvreg model — permres","title":"Permute residuals for a fitted ncvreg model — permres","text":"Fits multiple penalized regression models residuals randomly permuted, thereby allowing estimation marginal false discovery rate.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/permres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permute residuals for a fitted ncvreg model — permres","text":"","code":"permres(fit, ...)  # S3 method for class 'ncvreg' permres(fit, lambda, N = 10, seed, trace = FALSE, ...)"},{"path":"https://pbreheny.github.io/ncvreg/reference/permres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permute residuals for a fitted ncvreg model — permres","text":"fit fitted ncvreg model, produced ncvreg(). use permres, model must fit using returnX=TRUE option. ... used. lambda regularization parameter use estimating residuals. Unlike perm.ncvreg(), permres() calculates EF mFDR specific lambda value, entire path. result, runs much faster. N number permutation replications.  Default 10. seed may set seed random number generator order obtain reproducible results. trace set TRUE, perm.ncvreg inform user progress announcing beginning permutation fit. Default FALSE.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/permres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permute residuals for a fitted ncvreg model — permres","text":"list following components: EF number variables selected value lambda, averaged permutation fits. S actual number selected variables non-permuted data. mFDR estimated marginal false discovery rate (EF/S). loss loss/deviance, averaged permutation fits. estimate explanatory power model null conditions, can used adjust loss fitted model manner akin idea adjusted R-squared classical regression.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/permres.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permute residuals for a fitted ncvreg model — permres","text":"function fits penalized regression model actual data, repeats process N times permuted version response vector. allows estimation expected number variables included chance value lambda. ratio expected quantity number selected variables using actual (non-permuted) response called marginal false discovery rate (mFDR).","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/permres.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permute residuals for a fitted ncvreg model — permres","text":"Patrick Breheny patrick-breheny@uiowa.edu","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/permres.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permute residuals for a fitted ncvreg model — permres","text":"","code":"data(Prostate) fit <- ncvreg(Prostate$X, Prostate$y, N=50) permres(fit, lambda=0.15) #> $EF #> [1] 0.3 #>  #> $S #> 0.1500  #>      3  #>  #> $mFDR #> 0.1500  #>    0.1  #>  #> $loss #> [1] 48.63362 #>"},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.cv.ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the cross-validation curve from a cv.ncvreg object — plot.cv.ncvreg","title":"Plots the cross-validation curve from a cv.ncvreg object — plot.cv.ncvreg","text":"Plots cross-validation curve cv.ncvreg cv.ncvsurv object, along standard error bars.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.cv.ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the cross-validation curve from a cv.ncvreg object — plot.cv.ncvreg","text":"","code":"# S3 method for class 'cv.ncvreg' plot(   x,   log.l = TRUE,   type = c(\"cve\", \"rsq\", \"scale\", \"snr\", \"pred\", \"all\"),   selected = TRUE,   vertical.line = TRUE,   col = \"red\",   ... )"},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.cv.ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the cross-validation curve from a cv.ncvreg object — plot.cv.ncvreg","text":"x cv.ncvreg cv.ncvsurv object. log.l horizontal axis log scale?  Default TRUE. type plot vertical axis: cve plots cross-validation error (deviance) rsq plots estimate fraction deviance explained model (R-squared) snr plots estimate signal--noise ratio scale plots, family=\"gaussian\", estimate scale parameter (standard deviation) pred plots, family=\"binomial\", estimated prediction error produces selected TRUE (default), places axis top plot denoting number variables model (.e., nonzero regression coefficient) value lambda. vertical.line TRUE (default), draws vertical line value cross-validaton error minimized. col Controls color dots (CV estimates). ... graphical parameters plot()","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.cv.ncvreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots the cross-validation curve from a cv.ncvreg object — plot.cv.ncvreg","text":"Error bars representing approximate 68% confidence intervals plotted along estimates across values lambda. rsq snr applied models linear regression, Cox-Snell R-squared used.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.cv.ncvreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plots the cross-validation curve from a cv.ncvreg object — plot.cv.ncvreg","text":"Breheny P Huang J. (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232-253. doi:10.1214/10-AOAS388","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.cv.ncvreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plots the cross-validation curve from a cv.ncvreg object — plot.cv.ncvreg","text":"Patrick Breheny","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.cv.ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the cross-validation curve from a cv.ncvreg object — plot.cv.ncvreg","text":"","code":"# Linear regression -------------------------------------------------- data(Prostate) cvfit <- cv.ncvreg(Prostate$X, Prostate$y) plot(cvfit) op <- par(mfrow=c(2,2)) plot(cvfit, type=\"all\")  par(op)  # Logistic regression ------------------------------------------------ data(Heart) cvfit <- cv.ncvreg(Heart$X, Heart$y, family=\"binomial\") plot(cvfit) op <- par(mfrow=c(2,2)) plot(cvfit, type=\"all\")  par(op)  # Cox regression ----------------------------------------------------- data(Lung) cvfit <- cv.ncvsurv(Lung$X, Lung$y) op <- par(mfrow=c(1,2)) plot(cvfit) plot(cvfit, type=\"rsq\")  par(op)"},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.mfdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marginal false discovery rate curves — plot.mfdr","title":"Plot marginal false discovery rate curves — plot.mfdr","text":"Plot marginal false discovery rate curves mfdr perm.ncvreg object.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.mfdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marginal false discovery rate curves — plot.mfdr","text":"","code":"# S3 method for class 'mfdr' plot(   x,   type = c(\"mFDR\", \"EF\"),   log.l = FALSE,   selected = TRUE,   legend = TRUE,   ... )"},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.mfdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marginal false discovery rate curves — plot.mfdr","text":"x perm.ncvreg mfdr object. type plot vertical axis. mFDR plots marginal false discovery rate; EF plots expected number false discoveries along actual number variables included model. log.l horizontal axis log scale?  Default FALSE. selected TRUE (default), places axis top plot denoting number variables model (.e., nonzero regression coefficient) value lambda. legend type=\"EF\" plots, draw legend indicate line actual selections line expected number false discoveries? Default TRUE. ... graphical parameters pass plot()","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.mfdr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot marginal false discovery rate curves — plot.mfdr","text":"Breheny P (2019). Marginal false discovery rates penalized regression models. Biostatistics, 20: 299-314.","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.mfdr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot marginal false discovery rate curves — plot.mfdr","text":"Patrick Breheny","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.mfdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marginal false discovery rate curves — plot.mfdr","text":"","code":"data(Prostate) fit <- ncvreg(Prostate$X, Prostate$y)  obj <- mfdr(fit) obj[1:10,] #>                   EF S         mFDR #> 0.84343 0.000000e+00 0 0.000000e+00 #> 0.78658 1.418692e-11 1 1.418692e-11 #> 0.73357 3.642789e-11 1 3.642789e-11 #> 0.68413 1.098086e-10 1 1.098086e-10 #> 0.63802 3.833845e-10 1 3.833845e-10 #> 0.59502 1.516932e-09 1 1.516932e-09 #> 0.55492 6.608721e-09 1 6.608721e-09 #> 0.51752 3.065378e-08 1 3.065378e-08 #> 0.48264 1.460789e-07 1 1.460789e-07 #> 0.45011 6.907848e-07 1 6.907848e-07  # Some plotting options plot(obj)  plot(obj, type=\"EF\")  plot(obj, log=TRUE)    # Comparison with perm.ncvreg op <- par(mfrow=c(2,2)) plot(obj) plot(obj, type=\"EF\") pmfit <- perm.ncvreg(Prostate$X, Prostate$y) plot(pmfit) plot(pmfit, type=\"EF\")  par(op)"},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot coefficients from a ncvreg object — plot.ncvreg","title":"Plot coefficients from a ncvreg object — plot.ncvreg","text":"Produces plot coefficient paths fitted ncvreg object.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot coefficients from a ncvreg object — plot.ncvreg","text":"","code":"# S3 method for class 'ncvreg' plot(x, alpha = 1, log.l = FALSE, shade = TRUE, col, ...)"},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot coefficients from a ncvreg object — plot.ncvreg","text":"x Fitted \"ncvreg\" model. alpha Controls alpha-blending, helpful number features large. Default alpha=1. log.l horizontal axis log scale? Default FALSE. shade nonconvex region shaded? Default TRUE. col Vector colors coefficient lines. default, evenly spaced colors selected automatically. ... graphical parameters plot()","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot coefficients from a ncvreg object — plot.ncvreg","text":"Breheny P Huang J. (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232-253. doi:10.1214/10-AOAS388","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot coefficients from a ncvreg object — plot.ncvreg","text":"Patrick Breheny","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot coefficients from a ncvreg object — plot.ncvreg","text":"","code":"data(Prostate) fit <- ncvreg(Prostate$X, Prostate$y) plot(fit)  plot(fit, col=\"black\")  plot(fit, log=TRUE)  fit <- ncvreg(Prostate$X, Prostate$y, penalty.factor=rep(c(1, 1, 1, Inf), 2)) plot(fit, col=c('red', 'black', 'green'))  # Recycled among nonzero paths"},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvsurv.func.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot survival curve for ncvsurv model — plot.ncvsurv.func","title":"Plot survival curve for ncvsurv model — plot.ncvsurv.func","text":"Plot survival curve model fit using ncvsurv() followed prediction survival function using predict.ncvsurv().","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvsurv.func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot survival curve for ncvsurv model — plot.ncvsurv.func","text":"","code":"# S3 method for class 'ncvsurv.func' plot(x, alpha = 1, ...)"},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvsurv.func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot survival curve for ncvsurv model — plot.ncvsurv.func","text":"x ncvsurv.func object, returned predict.ncvsurv() type='survival' specified. See examples. alpha Controls alpha-blending (.e., transparency). Useful many overlapping lines present. ... graphical parameters pass plot","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvsurv.func.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot survival curve for ncvsurv model — plot.ncvsurv.func","text":"Patrick Breheny","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/plot.ncvsurv.func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot survival curve for ncvsurv model — plot.ncvsurv.func","text":"","code":"data(Lung) X <- Lung$X y <- Lung$y  fit <- ncvsurv(X, y)  # A single survival curve S <- predict(fit, X[1,], type='survival', lambda=.15) plot(S, xlim=c(0,200))   # Lots of survival curves S <- predict(fit, X, type='survival', lambda=.08) plot(S, xlim=c(0,200), alpha=0.3)"},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions based on a fitted ncvreg object. — predict.cv.ncvreg","title":"Model predictions based on a fitted ncvreg object. — predict.cv.ncvreg","text":"Similar predict methods, function returns predictions fitted ncvreg object.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions based on a fitted ncvreg object. — predict.cv.ncvreg","text":"","code":"# S3 method for class 'cv.ncvreg' predict(   object,   X,   type = c(\"link\", \"response\", \"class\", \"coefficients\", \"vars\", \"nvars\"),   which = object$min,   ... )  # S3 method for class 'cv.ncvreg' coef(object, which = object$min, ...)  # S3 method for class 'cv.ncvsurv' predict(   object,   X,   type = c(\"link\", \"response\", \"survival\", \"median\", \"coefficients\", \"vars\", \"nvars\"),   which = object$min,   ... )  # S3 method for class 'ncvreg' predict(   object,   X,   type = c(\"link\", \"response\", \"class\", \"coefficients\", \"vars\", \"nvars\"),   lambda,   which = 1:length(object$lambda),   ... )  # S3 method for class 'ncvreg' coef(object, lambda, which = 1:length(object$lambda), drop = TRUE, ...)"},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions based on a fitted ncvreg object. — predict.cv.ncvreg","text":"object Fitted ncvreg model object. X Matrix values predictions made. used type=\"coefficients\" type settings predict. type Type prediction: link returns linear predictors response gives fitted values class returns binomial outcome highest probability coefficients returns coefficients vars returns list containing indices names nonzero variables value lambda nvars returns number nonzero coefficients value lambda. Indices penalty parameter lambda predictions required.  default, indices returned. lambda specified, override . ... used. lambda Values regularization parameter lambda predictions requested. values lambda sequence fitted models, linear interpolation used. drop coefficients single value lambda returned, reduce dimensions vector?  Setting drop=FALSE returns 1-column matrix.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions based on a fitted ncvreg object. — predict.cv.ncvreg","text":"object returned depends type.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model predictions based on a fitted ncvreg object. — predict.cv.ncvreg","text":"Breheny P Huang J. (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232-253. doi:10.1214/10-AOAS388","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model predictions based on a fitted ncvreg object. — predict.cv.ncvreg","text":"Patrick Breheny","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model predictions based on a fitted ncvreg object. — predict.cv.ncvreg","text":"","code":"data(Heart)  fit <- ncvreg(Heart$X, Heart$y, family=\"binomial\") coef(fit, lambda=0.05) #>  (Intercept)          sbp      tobacco          ldl    adiposity      famhist  #> -4.079298688  0.000000000  0.037271649  0.075045442  0.000000000  0.611522063  #>        typea      obesity      alcohol          age  #>  0.009798506  0.000000000  0.000000000  0.047479496  head(predict(fit, Heart$X, type=\"link\", lambda=0.05)) #> [1]  0.358554123 -0.217849509 -0.510057641  0.546336589  0.216182502 #> [6] -0.007063715 head(predict(fit, Heart$X, type=\"response\", lambda=0.05)) #> [1] 0.5886904 0.4457520 0.3751800 0.6332852 0.5538361 0.4982341 head(predict(fit, Heart$X, type=\"class\", lambda=0.05)) #> [1] 1 0 0 1 1 0 predict(fit, type=\"vars\", lambda=c(0.05, 0.01)) #> $`0.0500` #> tobacco     ldl famhist   typea     age  #>       2       3       5       6       9  #>  #> $`0.0100` #>     sbp tobacco     ldl famhist   typea obesity     age  #>       1       2       3       5       6       7       9  #>  predict(fit, type=\"nvars\", lambda=c(0.05, 0.01)) #> 0.0500 0.0100  #>      5      7"},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvsurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Model predictions based on a fitted ncvsurv object. — predict.ncvsurv","title":"Model predictions based on a fitted ncvsurv object. — predict.ncvsurv","text":"Similar predict methods, function returns predictions fitted ncvsurv object.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvsurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model predictions based on a fitted ncvsurv object. — predict.ncvsurv","text":"","code":"# S3 method for class 'ncvsurv' predict(   object,   X,   type = c(\"link\", \"response\", \"survival\", \"hazard\", \"median\", \"coefficients\", \"vars\",     \"nvars\"),   lambda,   which = 1:length(object$lambda),   ... )"},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvsurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model predictions based on a fitted ncvsurv object. — predict.ncvsurv","text":"object Fitted \"ncvsurv\" model object. X Matrix values predictions made.  used type=\"coefficients\" type settings predict. type Type prediction: link returns linear predictors response gives risk (.e., exp(link)) survival returns estimated survival function median estimates median survival times options identical ncvreg() counterparts: coefficients returns coefficients vars returns list containing indices names nonzero variables value lambda nvars returns number nonzero coefficients value lambda. lambda Values regularization parameter lambda predictions requested.  values lambda sequence fitted models, linear interpolation used. Indices penalty parameter lambda predictions required. default, indices returned. lambda specified, override . ... used.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvsurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model predictions based on a fitted ncvsurv object. — predict.ncvsurv","text":"object returned depends type.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvsurv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model predictions based on a fitted ncvsurv object. — predict.ncvsurv","text":"Estimation baseline survival function conditional estimated values beta carried according method described Chapter 4.3 Kalbfleish Prentice.  particular, agrees exactly results returned survfit.coxph(..., type='kalbfleisch-prentice') survival package.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvsurv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model predictions based on a fitted ncvsurv object. — predict.ncvsurv","text":"Breheny P Huang J. (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232-253. doi:10.1214/10-AOAS388 Kalbfleish JD Prentice RL (2002). Statistical Analysis Failure Time Data, 2nd edition. Wiley.","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvsurv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model predictions based on a fitted ncvsurv object. — predict.ncvsurv","text":"Patrick Breheny patrick-breheny@uiowa.edu","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/predict.ncvsurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model predictions based on a fitted ncvsurv object. — predict.ncvsurv","text":"","code":"data(Lung) X <- Lung$X y <- Lung$y  fit <- ncvsurv(X,y) coef(fit, lambda=0.05) #>          trt        karno     diagtime          age        prior     squamous  #>  0.271657331 -0.031750420  0.000000000 -0.004227748  0.000000000 -0.852920353  #>        small        adeno        large  #>  0.000000000  0.261188132 -0.466335148  head(predict(fit, X, type=\"link\", lambda=0.05)) #>         1         2         3         4         5         6  #> -2.778003 -3.074368 -2.646943 -2.752636 -3.078596 -1.423431  head(predict(fit, X, type=\"response\", lambda=0.05)) #>          1          2          3          4          5          6  #> 0.06216253 0.04621881 0.07086755 0.06375954 0.04602382 0.24088609   # Survival function S <- predict(fit, X[1,], type=\"survival\", lambda=0.05) S(100) #> [1] 0.9421869 S <- predict(fit, X, type=\"survival\", lambda=0.05) plot(S, xlim=c(0,200))   # Medians predict(fit, X[1,], type=\"median\", lambda=0.05) #> [1] 999 M <- predict(fit, X, type=\"median\") M[1:10, 1:10] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   80  103  122  151  177  231  278  340  384   411 #>  [2,]   80  110  133  162  231  283  357  392  467   587 #>  [3,]   80  103  122  151  177  231  278  340  384   411 #>  [4,]   80  103  122  151  177  231  278  340  384   411 #>  [5,]   80  110  133  162  231  283  357  392  467   587 #>  [6,]   80   87   92   95  100  105  111  111  117   126 #>  [7,]   80   95  105  117  132  144  156  177  201   242 #>  [8,]   80  111  144  201  278  378  392  553  587   991 #>  [9,]   80   99  112  133  153  177  216  250  283   357 #> [10,]   80  110  133  162  231  283  357  392  467   587  # Nonzero coefficients predict(fit, type=\"vars\", lambda=c(0.1, 0.01)) #> $`0.1000` #>      trt    karno squamous    adeno    large  #>        1        2        6        8        9  #>  #> $`0.0100` #>      trt    karno      age    prior squamous    adeno    large  #>        1        2        4        5        6        8        9  #>  predict(fit, type=\"nvars\", lambda=c(0.1, 0.01)) #> 0.1000 0.0100  #>      5      7"},{"path":"https://pbreheny.github.io/ncvreg/reference/residuals.ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract residuals from a ncvreg or ncvsurv fit — residuals.ncvreg","title":"Extract residuals from a ncvreg or ncvsurv fit — residuals.ncvreg","text":"Currently, deviance residuals supported.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/residuals.ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract residuals from a ncvreg or ncvsurv fit — residuals.ncvreg","text":"","code":"# S3 method for class 'ncvreg' residuals(object, lambda, which = 1:length(object$lambda), drop = TRUE, ...)"},{"path":"https://pbreheny.github.io/ncvreg/reference/residuals.ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract residuals from a ncvreg or ncvsurv fit — residuals.ncvreg","text":"object Object class ncvreg ncvsurv. lambda Values regularization parameter residuals requested (numeric vector). values lambda sequence fitted models, linear interpolation used. Index penalty parameter residuals requested (default = indices). lambda specified, take precedence . drop default, single value lambda supplied, vector residuals returned (logical; default=TRUE). Set drop=FALSE wish function always return matrix (see drop()). ... used.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/residuals.ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract residuals from a ncvreg or ncvsurv fit — residuals.ncvreg","text":"","code":"data(Prostate) X <- Prostate$X y <- Prostate$y fit <- ncvreg(X, y) residuals(fit)[1:5, 1:5] #>     0.84343   0.78658   0.73357   0.68413   0.63802 #> 1 -2.909170 -2.768833 -2.637955 -2.515898 -2.402066 #> 2 -2.640906 -2.470432 -2.311447 -2.163178 -2.024901 #> 3 -2.640906 -2.505586 -2.379387 -2.261693 -2.151932 #> 4 -2.640906 -2.455181 -2.281973 -2.120439 -1.969792 #> 5 -2.106823 -2.063294 -2.022698 -1.984838 -1.949530 head(residuals(fit, lambda=0.1)) #>           1           2           3           4           5           6  #> -1.18876659 -1.04838206 -0.90774951 -0.91188292 -1.52674317 -0.03250198"},{"path":"https://pbreheny.github.io/ncvreg/reference/std.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardizes a design matrix — std","title":"Standardizes a design matrix — std","text":"Accepts design matrix returns standardized version matrix (.e., column mean 0 mean sum squares equal 1).","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/std.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardizes a design matrix — std","text":"","code":"std(X, Xnew)"},{"path":"https://pbreheny.github.io/ncvreg/reference/std.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardizes a design matrix — std","text":"X matrix (object can coerced matrix, data frame numeric vector). Xnew Optional. supplied, X must output std() Xnew standardized way. See examples might useful.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/std.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardizes a design matrix — std","text":"standardized design matrix, following attribues: center, scale mean standard deviation used scale columns nonsingular vector indicating columns original design matrix able standardized (constant columns standardized standard deviation 1)","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/std.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardizes a design matrix — std","text":"function centers scales column X $$\\sum_{=1}^n x_{ij}=0$$ $$n^{-1} \\sum_{=1}^n x_{ij}^2 = 1$$ j. usually necessary call directly, ncvreg internally standardizes design matrix, inspection standardized design matrix can sometimes useful. differs base R function scale() two ways: scale() uses sample standard deviation sqrt(sum(x^2)/(n-1)), std() uses root-mean-square standard deviation sqrt(mean(sum(x^2)) without \\(n/(n-1)\\) correction std faster.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/std.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardizes a design matrix — std","text":"","code":"data(Prostate) S <- std(Prostate$X) apply(S, 2, sum) #>        lcavol       lweight           age          lbph           svi  #>  4.211909e-15  6.637225e-14  4.140785e-14  1.110223e-16 -2.886580e-15  #>           lcp       gleason         pgg45  #>  1.576864e-14 -4.218847e-15  4.982126e-15  apply(S, 2, function(x) mean(x^2)) #>  lcavol lweight     age    lbph     svi     lcp gleason   pgg45  #>       1       1       1       1       1       1       1       1   # Standardizing new observations X1 <- Prostate$X[1:90,] X2 <- Prostate$X[91:97,] S <- std(X1) head(std(S, X2)) #>      lcavol    lweight        age       lbph        svi        lcp    gleason #> 91 1.845841  1.1196037  0.5439694 -1.0472200 -0.4472136 -0.8399653 -1.0076612 #> 92 1.197790  0.1447897 -0.4241118  0.8380061  2.2360680 -0.8399653  0.3459136 #> 93 1.467844  0.6016472  0.5439694 -1.0472200  2.2360680  1.2129092  0.3459136 #> 94 2.367589  0.6487805 -2.7751661 -1.0472200  2.2360680  1.8552150  0.3459136 #> 95 1.537935 -0.5017477 -1.6687876 -1.0472200  2.2360680  2.0786918  0.3459136 #> 96 1.515337  0.3661621  0.5439694  0.9828411  2.2360680  1.3921070  0.3459136 #>         pgg45 #> 91 -0.8476607 #> 92 -0.3129215 #> 93  1.2912962 #> 94  0.5783106 #> 95 -0.4911679 #> 96  2.0042819 # Useful if you fit to a standardized X, but then get new obs: y <- Prostate$y[1:90] fit <- ncvreg(S, y) predict(fit, std(S, X2), lambda=0.1) #>       91       92       93       94       95       96       97  #> 3.514077 2.938705 3.408371 3.813543 2.900628 3.445538 3.617198  # Same as predict(ncvreg(X1, y), X2, lambda=0.1) #>       91       92       93       94       95       96       97  #> 3.514077 2.938705 3.408371 3.813543 2.900628 3.445538 3.617198"},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.cv.ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing cross-validation-based inference — summary.cv.ncvreg","title":"Summarizing cross-validation-based inference — summary.cv.ncvreg","text":"Summary method cv.ncvreg objects","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.cv.ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing cross-validation-based inference — summary.cv.ncvreg","text":"","code":"# S3 method for class 'cv.ncvreg' summary(object, include_fit = FALSE, ...)  # S3 method for class 'summary.cv.ncvreg' print(x, digits, include_fit = FALSE, ...)"},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.cv.ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing cross-validation-based inference — summary.cv.ncvreg","text":"object cv.ncvreg cv.ncvsurv object. include_fit addition summarizing cross-validation object, also summarize model lowest CV error? (default: FALSE) ... arguments passed methods. x summary.cv.ncvreg object. digits Number digits past decimal point print .  Can vector specifying different display digits five non-integer printed values.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.cv.ncvreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing cross-validation-based inference — summary.cv.ncvreg","text":"object S3 class summary.cv.ncvreg. class print method contains following list elements: penalty penalty used ncvreg. model Either \"linear\" \"logistic\", depending family option ncvreg. n Number instances p Number regression coefficients (including intercept). min index lambda smallest cross-validation error. lambda sequence lambda values used cv.ncvreg. cve Cross-validation error (deviance). r.squared Proportion variance explained model, estimated cross-validation. models outside linear regression, Cox-Snell approach defining R-squared used. snr Signal noise ratio, estimated cross-validation. sigma linear regression models, scale parameter estimate. pe logistic regression models, prediction error (misclassification error).","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.cv.ncvreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summarizing cross-validation-based inference — summary.cv.ncvreg","text":"Breheny P Huang J. (2011) Coordinate descent algorithms nonconvex penalized regression, applications biological feature selection. Annals Applied Statistics, 5: 232-253. doi:10.1214/10-AOAS388","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.cv.ncvreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarizing cross-validation-based inference — summary.cv.ncvreg","text":"Patrick Breheny","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.cv.ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing cross-validation-based inference — summary.cv.ncvreg","text":"","code":"# Linear regression -------------------------------------------------- data(Prostate) cvfit <- cv.ncvreg(Prostate$X, Prostate$y) summary(cvfit) #> MCP-penalized linear regression with n=97, p=8 #> At minimum cross-validation error (lambda=0.0276): #> ------------------------------------------------- #>   Nonzero coefficients: 7 #>   Cross-validation error (deviance): 0.54 #>   R-squared: 0.59 #>   Signal-to-noise ratio: 1.45 #>   Scale estimate (sigma): 0.734  # Logistic regression ------------------------------------------------ data(Heart) cvfit <- cv.ncvreg(Heart$X, Heart$y, family=\"binomial\") summary(cvfit) #> MCP-penalized logistic regression with n=462, p=9 #> At minimum cross-validation error (lambda=0.0270): #> ------------------------------------------------- #>   Nonzero coefficients: 5 #>   Cross-validation error (deviance): 1.06 #>   R-squared: 0.21 #>   Signal-to-noise ratio: 0.26 #>   Prediction error: 0.271  # Cox regression ----------------------------------------------------- data(Lung) cvfit <- cv.ncvsurv(Lung$X, Lung$y) summary(cvfit) #> MCP-penalized Cox regression with n=137, p=8 #> At minimum cross-validation error (lambda=0.1276): #> ------------------------------------------------- #>   Nonzero coefficients: 3 #>   Cross-validation error (deviance): 7.53 #>   R-squared: 0.29 #>   Signal-to-noise ratio: 0.41"},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.ncvreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for ncvreg objects — summary.ncvreg","title":"Summary method for ncvreg objects — summary.ncvreg","text":"Inferential summaries ncvreg ncvsurv objects based local marginal false discovery rates.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.ncvreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for ncvreg objects — summary.ncvreg","text":"","code":"# S3 method for class 'ncvreg' summary(object, lambda, which, number, cutoff, sort = TRUE, sigma, ...)  # S3 method for class 'summary.ncvreg' print(x, digits, ...)"},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.ncvreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for ncvreg objects — summary.ncvreg","text":"object ncvreg ncvsurv object. lambda regularization parameter value inference reported. Alternatively, lambda may specified index; =10 means: report inference 10th value lambda along regularization path.  lambda specified, lambda takes precedence. number default, summary provide inferential summary variable selected (.e.,  variable nonzero coefficient). Specifying number=5, example, means summary table include 5 features lowest mfdr values, regardless whether selected.  see features, number=Inf. cutoff Alternatively, specifying example cutoff=0.3 report inference features mfdr 30%. number cutoff specified, intersection sets features reported. sort results sorted mfdr? (default: TRUE) sigma linear regression models, users can supply estimate residual standard deviation. default use RSS / DF, degrees freedom approximated using number nonzero coefficients. ... arguments; particular, set returnX=FALSE, need supply X y order calculate local mFDRs. x summary.ncvreg object. digits Number digits past decimal point print . Can vector specifying different display digits five non-integer printed values.","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.ncvreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for ncvreg objects — summary.ncvreg","text":"object S3 class summary.ncvreg. class print method contains following list elements: penalty penalty used ncvreg ncvsurv model Either \"linear\", \"logistic\", \"Cox\". n Number instances. p Number regression coefficients (including intercept). lambda lambda value inference reported. nvars number nonzero coefficients (, including intercept) value lambda. table table containing estimates, normalized test statistics (z), estimate local mfdr coefficient. mfdr may loosely interpreted, empirical Bayes sense, probability given feature null. unpen.table unpenalized coefficients, separate inferential summary given .  Currently, based lm/glm/coxph using penalized coefficients provide offset. useful less accurate, ideal; hope improve inferential methods unpenalized variables future.","code":""},{"path":[]},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.ncvreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method for ncvreg objects — summary.ncvreg","text":"Patrick Breheny patrick-breheny@uiowa.edu","code":""},{"path":"https://pbreheny.github.io/ncvreg/reference/summary.ncvreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for ncvreg objects — summary.ncvreg","text":"","code":"# Linear regression -------------------------------------------------- data(Prostate) fit <- ncvreg(Prostate$X, Prostate$y) summary(fit, lambda=0.08) #> MCP-penalized linear regression with n=97, p=8 #> At lambda=0.0800: #> ------------------------------------------------- #>   Nonzero coefficients         :   5 #>   Expected nonzero coefficients:   1.90 #>   Average mfdr (5 features)    :   0.381 #>  #>           Estimate      z     mfdr Selected #> lcavol   5.263e-01  8.618  < 1e-04        * #> svi      6.724e-01  3.867 0.016288        * #> lweight  6.410e-01  3.815 0.019837        * #> lbph     1.322e-02  1.295 0.926736        * #> age     -6.203e-05 -1.095 0.941368        *  # Logistic regression ------------------------------------------------ data(Heart) fit <- ncvreg(Heart$X, Heart$y, family=\"binomial\") summary(fit, lambda=0.05) #> MCP-penalized logistic regression with n=462, p=9 #> At lambda=0.0500: #> ------------------------------------------------- #>   Nonzero coefficients         :   5 #>   Expected nonzero coefficients:   0.18 #>   Average mfdr (5 features)    :   0.036 #>  #>         Estimate     z      mfdr Selected #> age     0.047479 6.645   < 1e-04        * #> famhist 0.611522 4.332 0.0010983        * #> tobacco 0.037272 3.465 0.0308975        * #> ldl     0.075045 3.385 0.0403379        * #> typea   0.009799 3.057 0.1077203        *  # Cox regression ----------------------------------------------------- data(Lung) fit <- ncvsurv(Lung$X, Lung$y) summary(fit, lambda=0.1) #> MCP-penalized Cox regression with n=137, p=8 #> At lambda=0.1000: #> ------------------------------------------------- #>   Nonzero coefficients         :   5 #>   Expected nonzero coefficients:   2.93 #>   Average mfdr (5 features)    :   0.586 #>  #>          Estimate      z    mfdr Selected #> karno    -0.03196 -6.352 < 1e-04        * #> squamous -0.64314 -3.120 0.24761        * #> adeno     0.28017  2.051 0.83922        * #> large    -0.20731 -1.799 0.89449        * #> trt       0.03738  1.332 0.94627        *  # Options ------------------------------------------------------------ fit <- ncvreg(Heart$X, Heart$y, family=\"binomial\") summary(fit, lambda=0.08, number=3) #> MCP-penalized logistic regression with n=462, p=9 #> At lambda=0.0800: #> ------------------------------------------------- #>   Features satisfying criteria       : 3 #>   Average mfdr among chosen features : 0.0026 #>  #>         Estimate     z       mfdr Selected #> age     0.041921 7.771    < 1e-04        * #> famhist 0.277822 4.627 0.00029409        * #> ldl     0.009273 3.847 0.00751773        * summary(fit, lambda=0.08, number=Inf) #> MCP-penalized logistic regression with n=462, p=9 #> At lambda=0.0800: #> ------------------------------------------------- #>   Features satisfying criteria       : 9 #>   Average mfdr among chosen features : 0.377 #>  #>           Estimate      z       mfdr Selected #> age       0.041921 7.7712    < 1e-04        * #> famhist   0.277822 4.6274 0.00029409        * #> ldl       0.009273 3.8473 0.00751773        * #> tobacco   0.005783 3.7881 0.00938405        * #> typea     0.000000 2.9383 0.13986436          #> adiposity 0.000000 1.8121 0.70188341          #> sbp       0.000000 1.7780 0.71453183          #> alcohol   0.000000 0.7807 0.89965322          #> obesity   0.000000 0.4339 0.91712823          summary(fit, lambda=0.08, cutoff=0.5) #> MCP-penalized logistic regression with n=462, p=9 #> At lambda=0.0800: #> ------------------------------------------------- #>   Features satisfying criteria       : 5 #>   Average mfdr among chosen features : 0.0314 #>  #>         Estimate     z       mfdr Selected #> age     0.041921 7.771    < 1e-04        * #> famhist 0.277822 4.627 0.00029409        * #> ldl     0.009273 3.847 0.00751773        * #> tobacco 0.005783 3.788 0.00938405        * #> typea   0.000000 2.938 0.13986436          summary(fit, lambda=0.08, number=3, cutoff=0.5) #> MCP-penalized logistic regression with n=462, p=9 #> At lambda=0.0800: #> ------------------------------------------------- #>   Features satisfying criteria       : 3 #>   Average mfdr among chosen features : 0.0026 #>  #>         Estimate     z       mfdr Selected #> age     0.041921 7.771    < 1e-04        * #> famhist 0.277822 4.627 0.00029409        * #> ldl     0.009273 3.847 0.00751773        * summary(fit, lambda=0.08, number=5, cutoff=0.1) #> MCP-penalized logistic regression with n=462, p=9 #> At lambda=0.0800: #> ------------------------------------------------- #>   Features satisfying criteria       : 4 #>   Average mfdr among chosen features : 0.0043 #>  #>         Estimate     z       mfdr Selected #> age     0.041921 7.771    < 1e-04        * #> famhist 0.277822 4.627 0.00029409        * #> ldl     0.009273 3.847 0.00751773        * #> tobacco 0.005783 3.788 0.00938405        * summary(fit, lambda=0.08, number=Inf, sort=FALSE) #> MCP-penalized logistic regression with n=462, p=9 #> At lambda=0.0800: #> ------------------------------------------------- #>   Features satisfying criteria       : 9 #>   Average mfdr among chosen features : 0.377 #>  #>           Estimate      z       mfdr Selected #> sbp       0.000000 1.7780 0.71453183          #> tobacco   0.005783 3.7881 0.00938405        * #> ldl       0.009273 3.8473 0.00751773        * #> adiposity 0.000000 1.8121 0.70188341          #> famhist   0.277822 4.6274 0.00029409        * #> typea     0.000000 2.9383 0.13986436          #> obesity   0.000000 0.4339 0.91712823          #> alcohol   0.000000 0.7807 0.89965322          #> age       0.041921 7.7712    < 1e-04        * summary(fit, lambda=0.08, number=3, cutoff=0.5, sort=FALSE) #> MCP-penalized logistic regression with n=462, p=9 #> At lambda=0.0800: #> ------------------------------------------------- #>   Features satisfying criteria       : 3 #>   Average mfdr among chosen features : 0.0026 #>  #>         Estimate     z       mfdr Selected #> ldl     0.009273 3.847 0.00751773        * #> famhist 0.277822 4.627 0.00029409        * #> age     0.041921 7.771    < 1e-04        *  # If X and y are not returned with the fit, they must be supplied fit <- ncvreg(Heart$X, Heart$y, family=\"binomial\", returnX=FALSE) summary(fit, X=Heart$X, y=Heart$y, lambda=0.08) #> MCP-penalized logistic regression with n=462, p=9 #> At lambda=0.0800: #> ------------------------------------------------- #>   Nonzero coefficients         :   4 #>   Expected nonzero coefficients:   0.02 #>   Average mfdr (4 features)    :   0.004 #>  #>         Estimate     z       mfdr Selected #> age     0.041921 7.771    < 1e-04        * #> famhist 0.277822 4.627 0.00029409        * #> ldl     0.009273 3.847 0.00751773        * #> tobacco 0.005783 3.788 0.00938405        *"},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-3150","dir":"Changelog","previous_headings":"","what":"ncvreg 3.15.0","title":"ncvreg 3.15.0","text":"CRAN release: 2025-02-11 New: boot_ncvreg() function obtain confidence intervals New: assign_fold() function assign folds CV Change: seed longer argument CV functions; use assign_fold() instead","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-3143","dir":"Changelog","previous_headings":"","what":"ncvreg 3.14.3","title":"ncvreg 3.14.3","text":"CRAN release: 2024-09-02 Internal: Now using R_Calloc R_USE_STRICT_R_HEADERS compatibility","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-3142","dir":"Changelog","previous_headings":"","what":"ncvreg 3.14.2","title":"ncvreg 3.14.2","text":"CRAN release: 2024-04-20 Documentation: Lots formatting fixes documentation","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-3141","dir":"Changelog","previous_headings":"","what":"ncvreg 3.14.1","title":"ncvreg 3.14.1","text":"CRAN release: 2023-04-25 Fixed: cv.ncvreg(), cv.ncvsurv() longer affect seed global environment seed specified","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-3140","dir":"Changelog","previous_headings":"","what":"ncvreg 3.14.0","title":"ncvreg 3.14.0","text":"New: residuals() method New: std() can now applied new data New: summary.ncvreg() now offers sort option; fixes #13 Change: fir() deprecated Change: local_mfdr() allows user specify sigma; also uses CV called cv object Fixed: Manual color palettes now recycled correctly; fixes #40; thank Logan Harris pointing Fixed: mfdr now works Poisson Documentation: Adding vignettes CV criteria, adaptive rescaling Documentation: References reformatted, URLs updated, DOIs added Internal: C code binomial, poisson now unified glm structure Internal: Now using roxygen2 documentation","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-3130","dir":"Changelog","previous_headings":"","what":"ncvreg 3.13.0","title":"ncvreg 3.13.0","text":"CRAN release: 2021-03-30 New: Options ‘xtx’ ‘r’ ncvfit() Internal: cv.ncvreg() now uses less memory (returnX ) Internal: Better error handling matrix supplied y Fixed: AUC() now compatible survival 3.2.10","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-3120","dir":"Changelog","previous_headings":"","what":"ncvreg 3.12.0","title":"ncvreg 3.12.0","text":"CRAN release: 2020-07-09 New: ncvfit(), raw API ncvreg solver full control standardization, etc. Changed: ncvreg ncvsurv now issue warning non-pathwise usage Internal: Now using tinytest unit testing Fixed: Memory leak cox-dh; resolves #20","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-3112","dir":"Changelog","previous_headings":"","what":"ncvreg 3.11.2","title":"ncvreg 3.11.2","text":"CRAN release: 2020-02-13 New: std() now works integer matrices numeric vectors Internal: Lots internal changes cleaner, reliable code New version numbering system","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-311-1","dir":"Changelog","previous_headings":"","what":"ncvreg 3.11-1","title":"ncvreg 3.11-1","text":"CRAN release: 2019-02-26 Fixed: Leave-one-cross-validation now works correctly logistic regression Documentation: Added documentation (online) local mfdr Documentation: Fixed broken links typos","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-311-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.11-0","title":"ncvreg 3.11-0","text":"CRAN release: 2018-09-13 Change: returnX now turned default X < 100 Mb (used 10 Mb) Change: summary.ncvreg now based solely local mfdr Change: Loss functions now consistently defined deviance types models Change: R^2 now consistently uses Cox-Snell definition types models Change: cv.ncvreg cv.ncvsurv now return fold assignments Fixed: Can now pass fold assignments cv.ncvsurv Documentation: Lots updates Documentation: vignette now html (used pdf) Documentation: pkgdown website","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-310-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.10-0","title":"ncvreg 3.10-0","text":"CRAN release: 2018-04-17 New: summary.ncvreg summary.ncvsurv now report tables inference feature based local mFDRs New: Option specify fold assignments cv.ncvsurv New: CVSE now calculated Cox models, option quick bootstrap Change: returnX now turned default X < 10 Mb Change: cv.ncvsurv now balances censoring across fold assignments Change: data sets now follow DataX, Datay convention Deprecated: cv.ind argument cv.ncvreg now called fold Portability: Fixed C99 flag Internal: Fixed & v && C issue","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-39-1","dir":"Changelog","previous_headings":"","what":"ncvreg 3.9-1","title":"ncvreg 3.9-1","text":"CRAN release: 2017-04-27 Change: Poission now returns linear predictors, like families Internal: Changing PROTECT/UNPROTECT conform new coding standards","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-39-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.9-0","title":"ncvreg 3.9-0","text":"CRAN release: 2017-03-16 Deprecated: fir() now called mfdr() Change: mfdr Cox logistic models longer use simplistic approximation 3.7-0. calculations much accurate, computationally intensive, carried C now. Change: mfdr Cox logistic models requires model matrix X now. Internal: Registration native routines Fixed: std() wasn’t matching column names one column got dropped","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-38-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.8-0","title":"ncvreg 3.8-0","text":"CRAN release: 2017-01-06 Change: max.iter now based total number iterations entire path Fixed: Bug fitting Cox model single lambda Fixed: std longer drops dimnames","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-37-1","dir":"Changelog","previous_headings":"","what":"ncvreg 3.7-1","title":"ncvreg 3.7-1","text":"CRAN release: 2016-12-23 Fixed: Various fixes fir function Fixed: Bug high dimensional (p > n) Cox models","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-37-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.7-0","title":"ncvreg 3.7-0","text":"CRAN release: 2016-12-13 New: fir extended Cox logistic regression New: summary function ncvreg ncvsurv objects Change: Convergence criterion now based RMSD linear predictors Change: Additional options improvements plot.fir Change: Better display fir objects Internal: Improved efficiency Cox models (linear predictor calculation now occurs C, R) Internal: Reorganized testing suite Fixed: lamNames single lambda passed Fixed: loss wasn’t returned gaussian failure converge Fixed: perm.ncvreg return NAs models saturated","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-36-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.6-0","title":"ncvreg 3.6-0","text":"CRAN release: 2016-06-13 New: Exports std() function standardizing design matrix Fixed: predict.cv.ncvsurv Documentation: Added ‘quick start’ vignette Internal: Improved efficiency cox models (avoids recalculating linear predictors) Internal: Reorganized testing suite Internal: ‘survival’ package now used setupLambda Cox models","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-35-2","dir":"Changelog","previous_headings":"","what":"ncvreg 3.5-2","title":"ncvreg 3.5-2","text":"CRAN release: 2016-04-09 New: Added user interrupt checking Fixed: ncvsurv integer penalty factors Fixed: Rare numerical accuracy bug cv fold assignments Fixed: LOOCV bug introduced bias-correction feature","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-35-1","dir":"Changelog","previous_headings":"","what":"ncvreg 3.5-1","title":"ncvreg 3.5-1","text":"CRAN release: 2016-02-07 New: Compute bias correction CV error; experimental feature point may change future Internal: Replaced AUC function efficient version using survival package Fixed: Penalty.factor cv.ncvsurv columns may degenerate","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-35-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.5-0","title":"ncvreg 3.5-0","text":"CRAN release: 2015-10-27 New: Added function AUC() calculate cross-validated AUC values ncvsurv models. New: Option return fitted values cross-validation folds (returnY=TRUE) cv.ncvreg cv.ncvsurv. Change: New method calculation cross-validation loss cv.ncvsurv. Change: accurate calculation convexMin presence unpenalized variables Fixed: Factor-valued y CV logistic regression Internal: Substantial efficiency improvements throughout Cox models. Coordinate descent redesigned work O(n) instead O(n^2) operations, R code redesigned various points avoid creation n x n matrices fitting cross-validating Cox regression models. Internal: Better double/int type checking penalty.factor Internal: Modifications NAMESPACE compatibility R 3.3.","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-34-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.4-0","title":"ncvreg 3.4-0","text":"CRAN release: 2015-05-04 New: Expanded predict function Cox models. predict.ncvsurv now estimates subject-specific survival functions medians. New: Plot method survival curves. New: Option perm.ncvreg permute residuals linear regression New: permres function estimate false inclusion rates based residuals specific value lambda New: support factors X, y. still recommended users convert X numeric matrix prior fitting order ensure predict() methods work properly, ncvreg now allow pass data frame factors handle things appropriately. Fixed: predict.ncvsurv, applied models saturation issues. Fixed: Small memory leak ncvsurv.","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-33-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.3-0","title":"ncvreg 3.3-0","text":"CRAN release: 2015-03-18 New: Support fitting survival models added (ncvsurv), along predict, plot, cv.ncvsurv support functions. Currently, Cox models type survival model implemented. New: Parallelization support cv.ncvreg (help Grant Brown) Fixed: cv.ncvreg, attempting use leave-one-cross-validation (thank Cajo ter Braak pointing ) Removed: ncvreg_fit; may return future version package.","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-32-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.2-0","title":"ncvreg 3.2-0","text":"CRAN release: 2014-07-12 New: Automatically coerces X matrix y numeric possible New: Made ncvreg_fit user-friendly: user longer specify lambda, works coef, predict, plot, etc. Changed: Modified order arguments predict ‘type’ comes ‘lambda’ ‘’ Fixed: Bug convexMin used penalty.factor option Internal: Updated algorithm ‘hybrid’ strong/active cycling","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-31-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.1-0","title":"ncvreg 3.1-0","text":"CRAN release: 2014-02-25 New: Added support Poisson regression Fixed: Bug ncvreg_fit arise fitting model without intercept Fixed: Bug cv.ncvreg univariate regression (thank Diego Franco Saldana pointing )","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-30-0","dir":"Changelog","previous_headings":"","what":"ncvreg 3.0-0","title":"ncvreg 3.0-0","text":"CRAN release: 2014-02-06 New: Added fir, perm.ncvreg, plot.fir functions purposes estimating displaying false inclusion rates; likely evolve next months Fixed: Bug cv.ncvreg user-specified lambda sequence Internal: Revised algorithms incorporate targeted cycling based strong rules Internal: Moved standardization C Internal: Moved calculation lambda sequence C Internal: result three changes, ncvreg now runs much faster large p","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-27-0","dir":"Changelog","previous_headings":"","what":"ncvreg 2.7-0","title":"ncvreg 2.7-0","text":"CRAN release: 2013-12-16 New: “vars” “nvars” options predict function. Changed: Modified look summary(cvfit) output. Internal: Modified details .Call interface.","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-26-0","dir":"Changelog","previous_headings":"","what":"ncvreg 2.6-0","title":"ncvreg 2.6-0","text":"CRAN release: 2013-10-03 New: Introduction function ncvreg_fit programmers want access internal C routines ncvreg, bypassing internal standardization processing New: Added vertical.line col options plot.cv.ncvreg Fixed: Bug axis annotations plot.cv.ncvreg model saturated Fixed: Deviance calculation; return NaN fitted probabilities 0 1 occurred binomial outcomes Fixed: NAMESPACE coef.cv.ncvreg predict.cv.ncvreg Internal: .Call now used instead .C","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-25-0","dir":"Changelog","previous_headings":"","what":"ncvreg 2.5-0","title":"ncvreg 2.5-0","text":"CRAN release: 2013-03-16 New: Options plot.cv.ncvreg plot estimates r-squared, signal--noise ratio, scale parameter, prediction error addition cross-validation error (deviance) New: Summary method cv.ncvreg displays information lambda.min, value lambda minimizing cross-validation error Fixed: Bug cv.ncvreg user-defined lambda values.","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-24-0","dir":"Changelog","previous_headings":"","what":"ncvreg 2.4-0","title":"ncvreg 2.4-0","text":"CRAN release: 2012-10-10 New: penalty.factor option New: coef predict methods now accept lambda argument New: logLik method (turn allows AIC/BIC) Changed: cv.grpreg now returns full data fit well CV errors Fixed: Error definition/calculation cross-validation error standard error Fixed: Bug arose lambda scalar (instead vector) Fixed: Bug cv.ncvreg linear regression – cross-validation carried deterministically (Thank Brenton Kenkel pointing ) Fixed: Intercept logistic regression calculated lamda=0 Internal: standardization efficient Internal: cdfit_ now returns loss (RSS gaussian, deviance binomial)","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-23-2","dir":"Changelog","previous_headings":"","what":"ncvreg 2.3-2","title":"ncvreg 2.3-2","text":"CRAN release: 2011-05-16 Documentation: Fixed formatting error citation.","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-23-1","dir":"Changelog","previous_headings":"","what":"ncvreg 2.3-1","title":"ncvreg 2.3-1","text":"CRAN release: 2011-05-11 Changed: plot.ncvreg: Made passing arguments plot.ncvreg flexible, user can pass options concerning plot lines Changed: plot.ncvreg: Changed default settings respect color (hcl instead hsv) line width","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-23","dir":"Changelog","previous_headings":"","what":"ncvreg 2.3","title":"ncvreg 2.3","text":"CRAN release: 2011-05-06 Documentation: Updated documentation cv.ncvreg.Rd, longer agreed function usage (oversight release version 2.2)","code":""},{"path":"https://pbreheny.github.io/ncvreg/news/index.html","id":"ncvreg-22","dir":"Changelog","previous_headings":"","what":"ncvreg 2.2","title":"ncvreg 2.2","text":"CRAN release: 2011-04-25 New: plot.cv.ncvreg plotting cv.ncvreg objects Changed: Divorced cross-validation fitting cv.ncvreg. user perspective, increases flexibility, although obtaining model CV-chosen regularization parameter now requires two calls (ncvreg cv.ncvreg). functions, however, logically separate involve entirely separate methods.","code":""}]
